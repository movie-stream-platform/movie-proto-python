// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: movie/movie_service.proto

package movie

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MovieService_CreateMovie_FullMethodName       = "/proto.movie.MovieService/CreateMovie"
	MovieService_GetMovie_FullMethodName          = "/proto.movie.MovieService/GetMovie"
	MovieService_UpdateMovie_FullMethodName       = "/proto.movie.MovieService/UpdateMovie"
	MovieService_DeleteMovie_FullMethodName       = "/proto.movie.MovieService/DeleteMovie"
	MovieService_GetMoviesByIDs_FullMethodName    = "/proto.movie.MovieService/GetMoviesByIDs"
	MovieService_BulkUpdateMovies_FullMethodName  = "/proto.movie.MovieService/BulkUpdateMovies"
	MovieService_BulkDeleteMovies_FullMethodName  = "/proto.movie.MovieService/BulkDeleteMovies"
	MovieService_ValidateMovie_FullMethodName     = "/proto.movie.MovieService/ValidateMovie"
	MovieService_PublishMovie_FullMethodName      = "/proto.movie.MovieService/PublishMovie"
	MovieService_UnpublishMovie_FullMethodName    = "/proto.movie.MovieService/UnpublishMovie"
	MovieService_SearchMovies_FullMethodName      = "/proto.movie.MovieService/SearchMovies"
	MovieService_GetPopularMovies_FullMethodName  = "/proto.movie.MovieService/GetPopularMovies"
	MovieService_GetTrendingMovies_FullMethodName = "/proto.movie.MovieService/GetTrendingMovies"
	MovieService_GetSimilarMovies_FullMethodName  = "/proto.movie.MovieService/GetSimilarMovies"
)

// MovieServiceClient is the client API for MovieService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Movie content management service
type MovieServiceClient interface {
	// Movie CRUD operations
	CreateMovie(ctx context.Context, in *CreateMovieRequest, opts ...grpc.CallOption) (*CreateMovieResponse, error)
	GetMovie(ctx context.Context, in *GetMovieRequest, opts ...grpc.CallOption) (*GetMovieResponse, error)
	UpdateMovie(ctx context.Context, in *UpdateMovieRequest, opts ...grpc.CallOption) (*UpdateMovieResponse, error)
	DeleteMovie(ctx context.Context, in *DeleteMovieRequest, opts ...grpc.CallOption) (*DeleteMovieResponse, error)
	// Bulk operations
	GetMoviesByIDs(ctx context.Context, in *GetMoviesByIDsRequest, opts ...grpc.CallOption) (*GetMoviesByIDsResponse, error)
	BulkUpdateMovies(ctx context.Context, in *BulkUpdateMoviesRequest, opts ...grpc.CallOption) (*BulkUpdateMoviesResponse, error)
	BulkDeleteMovies(ctx context.Context, in *BulkDeleteMoviesRequest, opts ...grpc.CallOption) (*BulkDeleteMoviesResponse, error)
	// Content Management
	ValidateMovie(ctx context.Context, in *ValidateMovieRequest, opts ...grpc.CallOption) (*ValidateMovieResponse, error)
	PublishMovie(ctx context.Context, in *PublishMovieRequest, opts ...grpc.CallOption) (*PublishMovieResponse, error)
	UnpublishMovie(ctx context.Context, in *UnpublishMovieRequest, opts ...grpc.CallOption) (*UnpublishMovieResponse, error)
	// Search and Discovery
	SearchMovies(ctx context.Context, in *SearchMoviesRequest, opts ...grpc.CallOption) (*SearchMoviesResponse, error)
	GetPopularMovies(ctx context.Context, in *GetPopularMoviesRequest, opts ...grpc.CallOption) (*GetPopularMoviesResponse, error)
	GetTrendingMovies(ctx context.Context, in *GetTrendingMoviesRequest, opts ...grpc.CallOption) (*GetTrendingMoviesResponse, error)
	GetSimilarMovies(ctx context.Context, in *GetSimilarMoviesRequest, opts ...grpc.CallOption) (*GetSimilarMoviesResponse, error)
}

type movieServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieServiceClient(cc grpc.ClientConnInterface) MovieServiceClient {
	return &movieServiceClient{cc}
}

func (c *movieServiceClient) CreateMovie(ctx context.Context, in *CreateMovieRequest, opts ...grpc.CallOption) (*CreateMovieResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMovieResponse)
	err := c.cc.Invoke(ctx, MovieService_CreateMovie_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetMovie(ctx context.Context, in *GetMovieRequest, opts ...grpc.CallOption) (*GetMovieResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMovieResponse)
	err := c.cc.Invoke(ctx, MovieService_GetMovie_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) UpdateMovie(ctx context.Context, in *UpdateMovieRequest, opts ...grpc.CallOption) (*UpdateMovieResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMovieResponse)
	err := c.cc.Invoke(ctx, MovieService_UpdateMovie_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) DeleteMovie(ctx context.Context, in *DeleteMovieRequest, opts ...grpc.CallOption) (*DeleteMovieResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMovieResponse)
	err := c.cc.Invoke(ctx, MovieService_DeleteMovie_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetMoviesByIDs(ctx context.Context, in *GetMoviesByIDsRequest, opts ...grpc.CallOption) (*GetMoviesByIDsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMoviesByIDsResponse)
	err := c.cc.Invoke(ctx, MovieService_GetMoviesByIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) BulkUpdateMovies(ctx context.Context, in *BulkUpdateMoviesRequest, opts ...grpc.CallOption) (*BulkUpdateMoviesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkUpdateMoviesResponse)
	err := c.cc.Invoke(ctx, MovieService_BulkUpdateMovies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) BulkDeleteMovies(ctx context.Context, in *BulkDeleteMoviesRequest, opts ...grpc.CallOption) (*BulkDeleteMoviesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkDeleteMoviesResponse)
	err := c.cc.Invoke(ctx, MovieService_BulkDeleteMovies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) ValidateMovie(ctx context.Context, in *ValidateMovieRequest, opts ...grpc.CallOption) (*ValidateMovieResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateMovieResponse)
	err := c.cc.Invoke(ctx, MovieService_ValidateMovie_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) PublishMovie(ctx context.Context, in *PublishMovieRequest, opts ...grpc.CallOption) (*PublishMovieResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishMovieResponse)
	err := c.cc.Invoke(ctx, MovieService_PublishMovie_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) UnpublishMovie(ctx context.Context, in *UnpublishMovieRequest, opts ...grpc.CallOption) (*UnpublishMovieResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnpublishMovieResponse)
	err := c.cc.Invoke(ctx, MovieService_UnpublishMovie_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) SearchMovies(ctx context.Context, in *SearchMoviesRequest, opts ...grpc.CallOption) (*SearchMoviesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchMoviesResponse)
	err := c.cc.Invoke(ctx, MovieService_SearchMovies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetPopularMovies(ctx context.Context, in *GetPopularMoviesRequest, opts ...grpc.CallOption) (*GetPopularMoviesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPopularMoviesResponse)
	err := c.cc.Invoke(ctx, MovieService_GetPopularMovies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetTrendingMovies(ctx context.Context, in *GetTrendingMoviesRequest, opts ...grpc.CallOption) (*GetTrendingMoviesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTrendingMoviesResponse)
	err := c.cc.Invoke(ctx, MovieService_GetTrendingMovies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetSimilarMovies(ctx context.Context, in *GetSimilarMoviesRequest, opts ...grpc.CallOption) (*GetSimilarMoviesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSimilarMoviesResponse)
	err := c.cc.Invoke(ctx, MovieService_GetSimilarMovies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieServiceServer is the server API for MovieService service.
// All implementations must embed UnimplementedMovieServiceServer
// for forward compatibility.
//
// Movie content management service
type MovieServiceServer interface {
	// Movie CRUD operations
	CreateMovie(context.Context, *CreateMovieRequest) (*CreateMovieResponse, error)
	GetMovie(context.Context, *GetMovieRequest) (*GetMovieResponse, error)
	UpdateMovie(context.Context, *UpdateMovieRequest) (*UpdateMovieResponse, error)
	DeleteMovie(context.Context, *DeleteMovieRequest) (*DeleteMovieResponse, error)
	// Bulk operations
	GetMoviesByIDs(context.Context, *GetMoviesByIDsRequest) (*GetMoviesByIDsResponse, error)
	BulkUpdateMovies(context.Context, *BulkUpdateMoviesRequest) (*BulkUpdateMoviesResponse, error)
	BulkDeleteMovies(context.Context, *BulkDeleteMoviesRequest) (*BulkDeleteMoviesResponse, error)
	// Content Management
	ValidateMovie(context.Context, *ValidateMovieRequest) (*ValidateMovieResponse, error)
	PublishMovie(context.Context, *PublishMovieRequest) (*PublishMovieResponse, error)
	UnpublishMovie(context.Context, *UnpublishMovieRequest) (*UnpublishMovieResponse, error)
	// Search and Discovery
	SearchMovies(context.Context, *SearchMoviesRequest) (*SearchMoviesResponse, error)
	GetPopularMovies(context.Context, *GetPopularMoviesRequest) (*GetPopularMoviesResponse, error)
	GetTrendingMovies(context.Context, *GetTrendingMoviesRequest) (*GetTrendingMoviesResponse, error)
	GetSimilarMovies(context.Context, *GetSimilarMoviesRequest) (*GetSimilarMoviesResponse, error)
	mustEmbedUnimplementedMovieServiceServer()
}

// UnimplementedMovieServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMovieServiceServer struct{}

func (UnimplementedMovieServiceServer) CreateMovie(context.Context, *CreateMovieRequest) (*CreateMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMovie not implemented")
}
func (UnimplementedMovieServiceServer) GetMovie(context.Context, *GetMovieRequest) (*GetMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovie not implemented")
}
func (UnimplementedMovieServiceServer) UpdateMovie(context.Context, *UpdateMovieRequest) (*UpdateMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMovie not implemented")
}
func (UnimplementedMovieServiceServer) DeleteMovie(context.Context, *DeleteMovieRequest) (*DeleteMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMovie not implemented")
}
func (UnimplementedMovieServiceServer) GetMoviesByIDs(context.Context, *GetMoviesByIDsRequest) (*GetMoviesByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMoviesByIDs not implemented")
}
func (UnimplementedMovieServiceServer) BulkUpdateMovies(context.Context, *BulkUpdateMoviesRequest) (*BulkUpdateMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkUpdateMovies not implemented")
}
func (UnimplementedMovieServiceServer) BulkDeleteMovies(context.Context, *BulkDeleteMoviesRequest) (*BulkDeleteMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkDeleteMovies not implemented")
}
func (UnimplementedMovieServiceServer) ValidateMovie(context.Context, *ValidateMovieRequest) (*ValidateMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateMovie not implemented")
}
func (UnimplementedMovieServiceServer) PublishMovie(context.Context, *PublishMovieRequest) (*PublishMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishMovie not implemented")
}
func (UnimplementedMovieServiceServer) UnpublishMovie(context.Context, *UnpublishMovieRequest) (*UnpublishMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpublishMovie not implemented")
}
func (UnimplementedMovieServiceServer) SearchMovies(context.Context, *SearchMoviesRequest) (*SearchMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMovies not implemented")
}
func (UnimplementedMovieServiceServer) GetPopularMovies(context.Context, *GetPopularMoviesRequest) (*GetPopularMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPopularMovies not implemented")
}
func (UnimplementedMovieServiceServer) GetTrendingMovies(context.Context, *GetTrendingMoviesRequest) (*GetTrendingMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrendingMovies not implemented")
}
func (UnimplementedMovieServiceServer) GetSimilarMovies(context.Context, *GetSimilarMoviesRequest) (*GetSimilarMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSimilarMovies not implemented")
}
func (UnimplementedMovieServiceServer) mustEmbedUnimplementedMovieServiceServer() {}
func (UnimplementedMovieServiceServer) testEmbeddedByValue()                      {}

// UnsafeMovieServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieServiceServer will
// result in compilation errors.
type UnsafeMovieServiceServer interface {
	mustEmbedUnimplementedMovieServiceServer()
}

func RegisterMovieServiceServer(s grpc.ServiceRegistrar, srv MovieServiceServer) {
	// If the following call pancis, it indicates UnimplementedMovieServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MovieService_ServiceDesc, srv)
}

func _MovieService_CreateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).CreateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_CreateMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).CreateMovie(ctx, req.(*CreateMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_GetMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetMovie(ctx, req.(*GetMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_UpdateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).UpdateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_UpdateMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).UpdateMovie(ctx, req.(*UpdateMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_DeleteMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).DeleteMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_DeleteMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).DeleteMovie(ctx, req.(*DeleteMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetMoviesByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMoviesByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetMoviesByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_GetMoviesByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetMoviesByIDs(ctx, req.(*GetMoviesByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_BulkUpdateMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkUpdateMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).BulkUpdateMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_BulkUpdateMovies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).BulkUpdateMovies(ctx, req.(*BulkUpdateMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_BulkDeleteMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkDeleteMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).BulkDeleteMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_BulkDeleteMovies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).BulkDeleteMovies(ctx, req.(*BulkDeleteMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_ValidateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).ValidateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_ValidateMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).ValidateMovie(ctx, req.(*ValidateMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_PublishMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).PublishMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_PublishMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).PublishMovie(ctx, req.(*PublishMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_UnpublishMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpublishMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).UnpublishMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_UnpublishMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).UnpublishMovie(ctx, req.(*UnpublishMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_SearchMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).SearchMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_SearchMovies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).SearchMovies(ctx, req.(*SearchMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetPopularMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPopularMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetPopularMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_GetPopularMovies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetPopularMovies(ctx, req.(*GetPopularMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetTrendingMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrendingMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetTrendingMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_GetTrendingMovies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetTrendingMovies(ctx, req.(*GetTrendingMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetSimilarMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSimilarMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetSimilarMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_GetSimilarMovies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetSimilarMovies(ctx, req.(*GetSimilarMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MovieService_ServiceDesc is the grpc.ServiceDesc for MovieService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.movie.MovieService",
	HandlerType: (*MovieServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMovie",
			Handler:    _MovieService_CreateMovie_Handler,
		},
		{
			MethodName: "GetMovie",
			Handler:    _MovieService_GetMovie_Handler,
		},
		{
			MethodName: "UpdateMovie",
			Handler:    _MovieService_UpdateMovie_Handler,
		},
		{
			MethodName: "DeleteMovie",
			Handler:    _MovieService_DeleteMovie_Handler,
		},
		{
			MethodName: "GetMoviesByIDs",
			Handler:    _MovieService_GetMoviesByIDs_Handler,
		},
		{
			MethodName: "BulkUpdateMovies",
			Handler:    _MovieService_BulkUpdateMovies_Handler,
		},
		{
			MethodName: "BulkDeleteMovies",
			Handler:    _MovieService_BulkDeleteMovies_Handler,
		},
		{
			MethodName: "ValidateMovie",
			Handler:    _MovieService_ValidateMovie_Handler,
		},
		{
			MethodName: "PublishMovie",
			Handler:    _MovieService_PublishMovie_Handler,
		},
		{
			MethodName: "UnpublishMovie",
			Handler:    _MovieService_UnpublishMovie_Handler,
		},
		{
			MethodName: "SearchMovies",
			Handler:    _MovieService_SearchMovies_Handler,
		},
		{
			MethodName: "GetPopularMovies",
			Handler:    _MovieService_GetPopularMovies_Handler,
		},
		{
			MethodName: "GetTrendingMovies",
			Handler:    _MovieService_GetTrendingMovies_Handler,
		},
		{
			MethodName: "GetSimilarMovies",
			Handler:    _MovieService_GetSimilarMovies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "movie/movie_service.proto",
}
