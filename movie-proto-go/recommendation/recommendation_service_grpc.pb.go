// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: recommendation/recommendation_service.proto

package recommendation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RecommendationService_GetContentBasedRecommendations_FullMethodName  = "/proto.recommendation.RecommendationService/GetContentBasedRecommendations"
	RecommendationService_GetSimilarContent_FullMethodName               = "/proto.recommendation.RecommendationService/GetSimilarContent"
	RecommendationService_GetContentFeatures_FullMethodName              = "/proto.recommendation.RecommendationService/GetContentFeatures"
	RecommendationService_GetCollaborativeRecommendations_FullMethodName = "/proto.recommendation.RecommendationService/GetCollaborativeRecommendations"
	RecommendationService_GetUserSimilarity_FullMethodName               = "/proto.recommendation.RecommendationService/GetUserSimilarity"
	RecommendationService_GetItemSimilarity_FullMethodName               = "/proto.recommendation.RecommendationService/GetItemSimilarity"
	RecommendationService_GetHybridRecommendations_FullMethodName        = "/proto.recommendation.RecommendationService/GetHybridRecommendations"
	RecommendationService_GetPersonalizedRecommendations_FullMethodName  = "/proto.recommendation.RecommendationService/GetPersonalizedRecommendations"
	RecommendationService_AnalyzeUserBehavior_FullMethodName             = "/proto.recommendation.RecommendationService/AnalyzeUserBehavior"
	RecommendationService_TrackUserInteraction_FullMethodName            = "/proto.recommendation.RecommendationService/TrackUserInteraction"
	RecommendationService_GetUserPreferences_FullMethodName              = "/proto.recommendation.RecommendationService/GetUserPreferences"
	RecommendationService_TrainRecommendationModel_FullMethodName        = "/proto.recommendation.RecommendationService/TrainRecommendationModel"
	RecommendationService_UpdateRecommendationModel_FullMethodName       = "/proto.recommendation.RecommendationService/UpdateRecommendationModel"
	RecommendationService_GetModelPerformance_FullMethodName             = "/proto.recommendation.RecommendationService/GetModelPerformance"
	RecommendationService_GetRecommendationAnalytics_FullMethodName      = "/proto.recommendation.RecommendationService/GetRecommendationAnalytics"
	RecommendationService_GetRecommendationInsights_FullMethodName       = "/proto.recommendation.RecommendationService/GetRecommendationInsights"
	RecommendationService_ExportRecommendationData_FullMethodName        = "/proto.recommendation.RecommendationService/ExportRecommendationData"
)

// RecommendationServiceClient is the client API for RecommendationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ML-based recommendation engine service
type RecommendationServiceClient interface {
	// Content-based recommendations
	GetContentBasedRecommendations(ctx context.Context, in *GetContentBasedRecommendationsRequest, opts ...grpc.CallOption) (*GetContentBasedRecommendationsResponse, error)
	GetSimilarContent(ctx context.Context, in *GetSimilarContentRequest, opts ...grpc.CallOption) (*GetSimilarContentResponse, error)
	GetContentFeatures(ctx context.Context, in *GetContentFeaturesRequest, opts ...grpc.CallOption) (*GetContentFeaturesResponse, error)
	// Collaborative filtering
	GetCollaborativeRecommendations(ctx context.Context, in *GetCollaborativeRecommendationsRequest, opts ...grpc.CallOption) (*GetCollaborativeRecommendationsResponse, error)
	GetUserSimilarity(ctx context.Context, in *GetUserSimilarityRequest, opts ...grpc.CallOption) (*GetUserSimilarityResponse, error)
	GetItemSimilarity(ctx context.Context, in *GetItemSimilarityRequest, opts ...grpc.CallOption) (*GetItemSimilarityResponse, error)
	// Hybrid recommendations
	GetHybridRecommendations(ctx context.Context, in *GetHybridRecommendationsRequest, opts ...grpc.CallOption) (*GetHybridRecommendationsResponse, error)
	GetPersonalizedRecommendations(ctx context.Context, in *GetPersonalizedRecommendationsRequest, opts ...grpc.CallOption) (*GetPersonalizedRecommendationsResponse, error)
	// Behavior analysis
	AnalyzeUserBehavior(ctx context.Context, in *AnalyzeUserBehaviorRequest, opts ...grpc.CallOption) (*AnalyzeUserBehaviorResponse, error)
	TrackUserInteraction(ctx context.Context, in *TrackUserInteractionRequest, opts ...grpc.CallOption) (*TrackUserInteractionResponse, error)
	GetUserPreferences(ctx context.Context, in *GetUserPreferencesRequest, opts ...grpc.CallOption) (*GetUserPreferencesResponse, error)
	// Model management
	TrainRecommendationModel(ctx context.Context, in *TrainRecommendationModelRequest, opts ...grpc.CallOption) (*TrainRecommendationModelResponse, error)
	UpdateRecommendationModel(ctx context.Context, in *UpdateRecommendationModelRequest, opts ...grpc.CallOption) (*UpdateRecommendationModelResponse, error)
	GetModelPerformance(ctx context.Context, in *GetModelPerformanceRequest, opts ...grpc.CallOption) (*GetModelPerformanceResponse, error)
	// Analytics and insights
	GetRecommendationAnalytics(ctx context.Context, in *GetRecommendationAnalyticsRequest, opts ...grpc.CallOption) (*GetRecommendationAnalyticsResponse, error)
	GetRecommendationInsights(ctx context.Context, in *GetRecommendationInsightsRequest, opts ...grpc.CallOption) (*GetRecommendationInsightsResponse, error)
	ExportRecommendationData(ctx context.Context, in *ExportRecommendationDataRequest, opts ...grpc.CallOption) (*ExportRecommendationDataResponse, error)
}

type recommendationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecommendationServiceClient(cc grpc.ClientConnInterface) RecommendationServiceClient {
	return &recommendationServiceClient{cc}
}

func (c *recommendationServiceClient) GetContentBasedRecommendations(ctx context.Context, in *GetContentBasedRecommendationsRequest, opts ...grpc.CallOption) (*GetContentBasedRecommendationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContentBasedRecommendationsResponse)
	err := c.cc.Invoke(ctx, RecommendationService_GetContentBasedRecommendations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendationServiceClient) GetSimilarContent(ctx context.Context, in *GetSimilarContentRequest, opts ...grpc.CallOption) (*GetSimilarContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSimilarContentResponse)
	err := c.cc.Invoke(ctx, RecommendationService_GetSimilarContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendationServiceClient) GetContentFeatures(ctx context.Context, in *GetContentFeaturesRequest, opts ...grpc.CallOption) (*GetContentFeaturesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContentFeaturesResponse)
	err := c.cc.Invoke(ctx, RecommendationService_GetContentFeatures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendationServiceClient) GetCollaborativeRecommendations(ctx context.Context, in *GetCollaborativeRecommendationsRequest, opts ...grpc.CallOption) (*GetCollaborativeRecommendationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCollaborativeRecommendationsResponse)
	err := c.cc.Invoke(ctx, RecommendationService_GetCollaborativeRecommendations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendationServiceClient) GetUserSimilarity(ctx context.Context, in *GetUserSimilarityRequest, opts ...grpc.CallOption) (*GetUserSimilarityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserSimilarityResponse)
	err := c.cc.Invoke(ctx, RecommendationService_GetUserSimilarity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendationServiceClient) GetItemSimilarity(ctx context.Context, in *GetItemSimilarityRequest, opts ...grpc.CallOption) (*GetItemSimilarityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetItemSimilarityResponse)
	err := c.cc.Invoke(ctx, RecommendationService_GetItemSimilarity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendationServiceClient) GetHybridRecommendations(ctx context.Context, in *GetHybridRecommendationsRequest, opts ...grpc.CallOption) (*GetHybridRecommendationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHybridRecommendationsResponse)
	err := c.cc.Invoke(ctx, RecommendationService_GetHybridRecommendations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendationServiceClient) GetPersonalizedRecommendations(ctx context.Context, in *GetPersonalizedRecommendationsRequest, opts ...grpc.CallOption) (*GetPersonalizedRecommendationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPersonalizedRecommendationsResponse)
	err := c.cc.Invoke(ctx, RecommendationService_GetPersonalizedRecommendations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendationServiceClient) AnalyzeUserBehavior(ctx context.Context, in *AnalyzeUserBehaviorRequest, opts ...grpc.CallOption) (*AnalyzeUserBehaviorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyzeUserBehaviorResponse)
	err := c.cc.Invoke(ctx, RecommendationService_AnalyzeUserBehavior_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendationServiceClient) TrackUserInteraction(ctx context.Context, in *TrackUserInteractionRequest, opts ...grpc.CallOption) (*TrackUserInteractionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackUserInteractionResponse)
	err := c.cc.Invoke(ctx, RecommendationService_TrackUserInteraction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendationServiceClient) GetUserPreferences(ctx context.Context, in *GetUserPreferencesRequest, opts ...grpc.CallOption) (*GetUserPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserPreferencesResponse)
	err := c.cc.Invoke(ctx, RecommendationService_GetUserPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendationServiceClient) TrainRecommendationModel(ctx context.Context, in *TrainRecommendationModelRequest, opts ...grpc.CallOption) (*TrainRecommendationModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrainRecommendationModelResponse)
	err := c.cc.Invoke(ctx, RecommendationService_TrainRecommendationModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendationServiceClient) UpdateRecommendationModel(ctx context.Context, in *UpdateRecommendationModelRequest, opts ...grpc.CallOption) (*UpdateRecommendationModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRecommendationModelResponse)
	err := c.cc.Invoke(ctx, RecommendationService_UpdateRecommendationModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendationServiceClient) GetModelPerformance(ctx context.Context, in *GetModelPerformanceRequest, opts ...grpc.CallOption) (*GetModelPerformanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetModelPerformanceResponse)
	err := c.cc.Invoke(ctx, RecommendationService_GetModelPerformance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendationServiceClient) GetRecommendationAnalytics(ctx context.Context, in *GetRecommendationAnalyticsRequest, opts ...grpc.CallOption) (*GetRecommendationAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecommendationAnalyticsResponse)
	err := c.cc.Invoke(ctx, RecommendationService_GetRecommendationAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendationServiceClient) GetRecommendationInsights(ctx context.Context, in *GetRecommendationInsightsRequest, opts ...grpc.CallOption) (*GetRecommendationInsightsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecommendationInsightsResponse)
	err := c.cc.Invoke(ctx, RecommendationService_GetRecommendationInsights_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendationServiceClient) ExportRecommendationData(ctx context.Context, in *ExportRecommendationDataRequest, opts ...grpc.CallOption) (*ExportRecommendationDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportRecommendationDataResponse)
	err := c.cc.Invoke(ctx, RecommendationService_ExportRecommendationData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecommendationServiceServer is the server API for RecommendationService service.
// All implementations must embed UnimplementedRecommendationServiceServer
// for forward compatibility.
//
// ML-based recommendation engine service
type RecommendationServiceServer interface {
	// Content-based recommendations
	GetContentBasedRecommendations(context.Context, *GetContentBasedRecommendationsRequest) (*GetContentBasedRecommendationsResponse, error)
	GetSimilarContent(context.Context, *GetSimilarContentRequest) (*GetSimilarContentResponse, error)
	GetContentFeatures(context.Context, *GetContentFeaturesRequest) (*GetContentFeaturesResponse, error)
	// Collaborative filtering
	GetCollaborativeRecommendations(context.Context, *GetCollaborativeRecommendationsRequest) (*GetCollaborativeRecommendationsResponse, error)
	GetUserSimilarity(context.Context, *GetUserSimilarityRequest) (*GetUserSimilarityResponse, error)
	GetItemSimilarity(context.Context, *GetItemSimilarityRequest) (*GetItemSimilarityResponse, error)
	// Hybrid recommendations
	GetHybridRecommendations(context.Context, *GetHybridRecommendationsRequest) (*GetHybridRecommendationsResponse, error)
	GetPersonalizedRecommendations(context.Context, *GetPersonalizedRecommendationsRequest) (*GetPersonalizedRecommendationsResponse, error)
	// Behavior analysis
	AnalyzeUserBehavior(context.Context, *AnalyzeUserBehaviorRequest) (*AnalyzeUserBehaviorResponse, error)
	TrackUserInteraction(context.Context, *TrackUserInteractionRequest) (*TrackUserInteractionResponse, error)
	GetUserPreferences(context.Context, *GetUserPreferencesRequest) (*GetUserPreferencesResponse, error)
	// Model management
	TrainRecommendationModel(context.Context, *TrainRecommendationModelRequest) (*TrainRecommendationModelResponse, error)
	UpdateRecommendationModel(context.Context, *UpdateRecommendationModelRequest) (*UpdateRecommendationModelResponse, error)
	GetModelPerformance(context.Context, *GetModelPerformanceRequest) (*GetModelPerformanceResponse, error)
	// Analytics and insights
	GetRecommendationAnalytics(context.Context, *GetRecommendationAnalyticsRequest) (*GetRecommendationAnalyticsResponse, error)
	GetRecommendationInsights(context.Context, *GetRecommendationInsightsRequest) (*GetRecommendationInsightsResponse, error)
	ExportRecommendationData(context.Context, *ExportRecommendationDataRequest) (*ExportRecommendationDataResponse, error)
	mustEmbedUnimplementedRecommendationServiceServer()
}

// UnimplementedRecommendationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRecommendationServiceServer struct{}

func (UnimplementedRecommendationServiceServer) GetContentBasedRecommendations(context.Context, *GetContentBasedRecommendationsRequest) (*GetContentBasedRecommendationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContentBasedRecommendations not implemented")
}
func (UnimplementedRecommendationServiceServer) GetSimilarContent(context.Context, *GetSimilarContentRequest) (*GetSimilarContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSimilarContent not implemented")
}
func (UnimplementedRecommendationServiceServer) GetContentFeatures(context.Context, *GetContentFeaturesRequest) (*GetContentFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContentFeatures not implemented")
}
func (UnimplementedRecommendationServiceServer) GetCollaborativeRecommendations(context.Context, *GetCollaborativeRecommendationsRequest) (*GetCollaborativeRecommendationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollaborativeRecommendations not implemented")
}
func (UnimplementedRecommendationServiceServer) GetUserSimilarity(context.Context, *GetUserSimilarityRequest) (*GetUserSimilarityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSimilarity not implemented")
}
func (UnimplementedRecommendationServiceServer) GetItemSimilarity(context.Context, *GetItemSimilarityRequest) (*GetItemSimilarityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemSimilarity not implemented")
}
func (UnimplementedRecommendationServiceServer) GetHybridRecommendations(context.Context, *GetHybridRecommendationsRequest) (*GetHybridRecommendationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHybridRecommendations not implemented")
}
func (UnimplementedRecommendationServiceServer) GetPersonalizedRecommendations(context.Context, *GetPersonalizedRecommendationsRequest) (*GetPersonalizedRecommendationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonalizedRecommendations not implemented")
}
func (UnimplementedRecommendationServiceServer) AnalyzeUserBehavior(context.Context, *AnalyzeUserBehaviorRequest) (*AnalyzeUserBehaviorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeUserBehavior not implemented")
}
func (UnimplementedRecommendationServiceServer) TrackUserInteraction(context.Context, *TrackUserInteractionRequest) (*TrackUserInteractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackUserInteraction not implemented")
}
func (UnimplementedRecommendationServiceServer) GetUserPreferences(context.Context, *GetUserPreferencesRequest) (*GetUserPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPreferences not implemented")
}
func (UnimplementedRecommendationServiceServer) TrainRecommendationModel(context.Context, *TrainRecommendationModelRequest) (*TrainRecommendationModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrainRecommendationModel not implemented")
}
func (UnimplementedRecommendationServiceServer) UpdateRecommendationModel(context.Context, *UpdateRecommendationModelRequest) (*UpdateRecommendationModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecommendationModel not implemented")
}
func (UnimplementedRecommendationServiceServer) GetModelPerformance(context.Context, *GetModelPerformanceRequest) (*GetModelPerformanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelPerformance not implemented")
}
func (UnimplementedRecommendationServiceServer) GetRecommendationAnalytics(context.Context, *GetRecommendationAnalyticsRequest) (*GetRecommendationAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendationAnalytics not implemented")
}
func (UnimplementedRecommendationServiceServer) GetRecommendationInsights(context.Context, *GetRecommendationInsightsRequest) (*GetRecommendationInsightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendationInsights not implemented")
}
func (UnimplementedRecommendationServiceServer) ExportRecommendationData(context.Context, *ExportRecommendationDataRequest) (*ExportRecommendationDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportRecommendationData not implemented")
}
func (UnimplementedRecommendationServiceServer) mustEmbedUnimplementedRecommendationServiceServer() {}
func (UnimplementedRecommendationServiceServer) testEmbeddedByValue()                               {}

// UnsafeRecommendationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecommendationServiceServer will
// result in compilation errors.
type UnsafeRecommendationServiceServer interface {
	mustEmbedUnimplementedRecommendationServiceServer()
}

func RegisterRecommendationServiceServer(s grpc.ServiceRegistrar, srv RecommendationServiceServer) {
	// If the following call pancis, it indicates UnimplementedRecommendationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RecommendationService_ServiceDesc, srv)
}

func _RecommendationService_GetContentBasedRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContentBasedRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationServiceServer).GetContentBasedRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendationService_GetContentBasedRecommendations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationServiceServer).GetContentBasedRecommendations(ctx, req.(*GetContentBasedRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommendationService_GetSimilarContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSimilarContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationServiceServer).GetSimilarContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendationService_GetSimilarContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationServiceServer).GetSimilarContent(ctx, req.(*GetSimilarContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommendationService_GetContentFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContentFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationServiceServer).GetContentFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendationService_GetContentFeatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationServiceServer).GetContentFeatures(ctx, req.(*GetContentFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommendationService_GetCollaborativeRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollaborativeRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationServiceServer).GetCollaborativeRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendationService_GetCollaborativeRecommendations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationServiceServer).GetCollaborativeRecommendations(ctx, req.(*GetCollaborativeRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommendationService_GetUserSimilarity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSimilarityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationServiceServer).GetUserSimilarity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendationService_GetUserSimilarity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationServiceServer).GetUserSimilarity(ctx, req.(*GetUserSimilarityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommendationService_GetItemSimilarity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemSimilarityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationServiceServer).GetItemSimilarity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendationService_GetItemSimilarity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationServiceServer).GetItemSimilarity(ctx, req.(*GetItemSimilarityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommendationService_GetHybridRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHybridRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationServiceServer).GetHybridRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendationService_GetHybridRecommendations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationServiceServer).GetHybridRecommendations(ctx, req.(*GetHybridRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommendationService_GetPersonalizedRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonalizedRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationServiceServer).GetPersonalizedRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendationService_GetPersonalizedRecommendations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationServiceServer).GetPersonalizedRecommendations(ctx, req.(*GetPersonalizedRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommendationService_AnalyzeUserBehavior_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeUserBehaviorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationServiceServer).AnalyzeUserBehavior(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendationService_AnalyzeUserBehavior_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationServiceServer).AnalyzeUserBehavior(ctx, req.(*AnalyzeUserBehaviorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommendationService_TrackUserInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackUserInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationServiceServer).TrackUserInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendationService_TrackUserInteraction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationServiceServer).TrackUserInteraction(ctx, req.(*TrackUserInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommendationService_GetUserPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationServiceServer).GetUserPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendationService_GetUserPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationServiceServer).GetUserPreferences(ctx, req.(*GetUserPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommendationService_TrainRecommendationModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainRecommendationModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationServiceServer).TrainRecommendationModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendationService_TrainRecommendationModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationServiceServer).TrainRecommendationModel(ctx, req.(*TrainRecommendationModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommendationService_UpdateRecommendationModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecommendationModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationServiceServer).UpdateRecommendationModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendationService_UpdateRecommendationModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationServiceServer).UpdateRecommendationModel(ctx, req.(*UpdateRecommendationModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommendationService_GetModelPerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelPerformanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationServiceServer).GetModelPerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendationService_GetModelPerformance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationServiceServer).GetModelPerformance(ctx, req.(*GetModelPerformanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommendationService_GetRecommendationAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendationAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationServiceServer).GetRecommendationAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendationService_GetRecommendationAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationServiceServer).GetRecommendationAnalytics(ctx, req.(*GetRecommendationAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommendationService_GetRecommendationInsights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendationInsightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationServiceServer).GetRecommendationInsights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendationService_GetRecommendationInsights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationServiceServer).GetRecommendationInsights(ctx, req.(*GetRecommendationInsightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommendationService_ExportRecommendationData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportRecommendationDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationServiceServer).ExportRecommendationData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendationService_ExportRecommendationData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationServiceServer).ExportRecommendationData(ctx, req.(*ExportRecommendationDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecommendationService_ServiceDesc is the grpc.ServiceDesc for RecommendationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecommendationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.recommendation.RecommendationService",
	HandlerType: (*RecommendationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetContentBasedRecommendations",
			Handler:    _RecommendationService_GetContentBasedRecommendations_Handler,
		},
		{
			MethodName: "GetSimilarContent",
			Handler:    _RecommendationService_GetSimilarContent_Handler,
		},
		{
			MethodName: "GetContentFeatures",
			Handler:    _RecommendationService_GetContentFeatures_Handler,
		},
		{
			MethodName: "GetCollaborativeRecommendations",
			Handler:    _RecommendationService_GetCollaborativeRecommendations_Handler,
		},
		{
			MethodName: "GetUserSimilarity",
			Handler:    _RecommendationService_GetUserSimilarity_Handler,
		},
		{
			MethodName: "GetItemSimilarity",
			Handler:    _RecommendationService_GetItemSimilarity_Handler,
		},
		{
			MethodName: "GetHybridRecommendations",
			Handler:    _RecommendationService_GetHybridRecommendations_Handler,
		},
		{
			MethodName: "GetPersonalizedRecommendations",
			Handler:    _RecommendationService_GetPersonalizedRecommendations_Handler,
		},
		{
			MethodName: "AnalyzeUserBehavior",
			Handler:    _RecommendationService_AnalyzeUserBehavior_Handler,
		},
		{
			MethodName: "TrackUserInteraction",
			Handler:    _RecommendationService_TrackUserInteraction_Handler,
		},
		{
			MethodName: "GetUserPreferences",
			Handler:    _RecommendationService_GetUserPreferences_Handler,
		},
		{
			MethodName: "TrainRecommendationModel",
			Handler:    _RecommendationService_TrainRecommendationModel_Handler,
		},
		{
			MethodName: "UpdateRecommendationModel",
			Handler:    _RecommendationService_UpdateRecommendationModel_Handler,
		},
		{
			MethodName: "GetModelPerformance",
			Handler:    _RecommendationService_GetModelPerformance_Handler,
		},
		{
			MethodName: "GetRecommendationAnalytics",
			Handler:    _RecommendationService_GetRecommendationAnalytics_Handler,
		},
		{
			MethodName: "GetRecommendationInsights",
			Handler:    _RecommendationService_GetRecommendationInsights_Handler,
		},
		{
			MethodName: "ExportRecommendationData",
			Handler:    _RecommendationService_ExportRecommendationData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recommendation/recommendation_service.proto",
}
