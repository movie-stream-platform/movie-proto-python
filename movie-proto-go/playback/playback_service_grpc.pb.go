// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: playback/playback_service.proto

package playback

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PlaybackService_CreatePlaybackSession_FullMethodName   = "/proto.playback.PlaybackService/CreatePlaybackSession"
	PlaybackService_GetPlaybackSession_FullMethodName      = "/proto.playback.PlaybackService/GetPlaybackSession"
	PlaybackService_UpdatePlaybackSession_FullMethodName   = "/proto.playback.PlaybackService/UpdatePlaybackSession"
	PlaybackService_EndPlaybackSession_FullMethodName      = "/proto.playback.PlaybackService/EndPlaybackSession"
	PlaybackService_StartPlayback_FullMethodName           = "/proto.playback.PlaybackService/StartPlayback"
	PlaybackService_PausePlayback_FullMethodName           = "/proto.playback.PlaybackService/PausePlayback"
	PlaybackService_ResumePlayback_FullMethodName          = "/proto.playback.PlaybackService/ResumePlayback"
	PlaybackService_StopPlayback_FullMethodName            = "/proto.playback.PlaybackService/StopPlayback"
	PlaybackService_SeekPlayback_FullMethodName            = "/proto.playback.PlaybackService/SeekPlayback"
	PlaybackService_UpdatePlaybackProgress_FullMethodName  = "/proto.playback.PlaybackService/UpdatePlaybackProgress"
	PlaybackService_GetPlaybackProgress_FullMethodName     = "/proto.playback.PlaybackService/GetPlaybackProgress"
	PlaybackService_GetPlaybackHistory_FullMethodName      = "/proto.playback.PlaybackService/GetPlaybackHistory"
	PlaybackService_GetAvailableQualities_FullMethodName   = "/proto.playback.PlaybackService/GetAvailableQualities"
	PlaybackService_ChangePlaybackQuality_FullMethodName   = "/proto.playback.PlaybackService/ChangePlaybackQuality"
	PlaybackService_GetAdaptiveBitrateInfo_FullMethodName  = "/proto.playback.PlaybackService/GetAdaptiveBitrateInfo"
	PlaybackService_GetStreamingURL_FullMethodName         = "/proto.playback.PlaybackService/GetStreamingURL"
	PlaybackService_ValidateStreamingAccess_FullMethodName = "/proto.playback.PlaybackService/ValidateStreamingAccess"
	PlaybackService_GetStreamingMetrics_FullMethodName     = "/proto.playback.PlaybackService/GetStreamingMetrics"
	PlaybackService_TrackPlaybackEvent_FullMethodName      = "/proto.playback.PlaybackService/TrackPlaybackEvent"
	PlaybackService_GetPlaybackAnalytics_FullMethodName    = "/proto.playback.PlaybackService/GetPlaybackAnalytics"
	PlaybackService_GetStreamingPerformance_FullMethodName = "/proto.playback.PlaybackService/GetStreamingPerformance"
	PlaybackService_GetDRMLicense_FullMethodName           = "/proto.playback.PlaybackService/GetDRMLicense"
	PlaybackService_ValidateDRMToken_FullMethodName        = "/proto.playback.PlaybackService/ValidateDRMToken"
	PlaybackService_GetContentProtection_FullMethodName    = "/proto.playback.PlaybackService/GetContentProtection"
)

// PlaybackServiceClient is the client API for PlaybackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Streaming and playback management service
type PlaybackServiceClient interface {
	// Session management
	CreatePlaybackSession(ctx context.Context, in *CreatePlaybackSessionRequest, opts ...grpc.CallOption) (*CreatePlaybackSessionResponse, error)
	GetPlaybackSession(ctx context.Context, in *GetPlaybackSessionRequest, opts ...grpc.CallOption) (*GetPlaybackSessionResponse, error)
	UpdatePlaybackSession(ctx context.Context, in *UpdatePlaybackSessionRequest, opts ...grpc.CallOption) (*UpdatePlaybackSessionResponse, error)
	EndPlaybackSession(ctx context.Context, in *EndPlaybackSessionRequest, opts ...grpc.CallOption) (*EndPlaybackSessionResponse, error)
	// Playback control
	StartPlayback(ctx context.Context, in *StartPlaybackRequest, opts ...grpc.CallOption) (*StartPlaybackResponse, error)
	PausePlayback(ctx context.Context, in *PausePlaybackRequest, opts ...grpc.CallOption) (*PausePlaybackResponse, error)
	ResumePlayback(ctx context.Context, in *ResumePlaybackRequest, opts ...grpc.CallOption) (*ResumePlaybackResponse, error)
	StopPlayback(ctx context.Context, in *StopPlaybackRequest, opts ...grpc.CallOption) (*StopPlaybackResponse, error)
	SeekPlayback(ctx context.Context, in *SeekPlaybackRequest, opts ...grpc.CallOption) (*SeekPlaybackResponse, error)
	// Progress tracking
	UpdatePlaybackProgress(ctx context.Context, in *UpdatePlaybackProgressRequest, opts ...grpc.CallOption) (*UpdatePlaybackProgressResponse, error)
	GetPlaybackProgress(ctx context.Context, in *GetPlaybackProgressRequest, opts ...grpc.CallOption) (*GetPlaybackProgressResponse, error)
	GetPlaybackHistory(ctx context.Context, in *GetPlaybackHistoryRequest, opts ...grpc.CallOption) (*GetPlaybackHistoryResponse, error)
	// Quality adaptation
	GetAvailableQualities(ctx context.Context, in *GetAvailableQualitiesRequest, opts ...grpc.CallOption) (*GetAvailableQualitiesResponse, error)
	ChangePlaybackQuality(ctx context.Context, in *ChangePlaybackQualityRequest, opts ...grpc.CallOption) (*ChangePlaybackQualityResponse, error)
	GetAdaptiveBitrateInfo(ctx context.Context, in *GetAdaptiveBitrateInfoRequest, opts ...grpc.CallOption) (*GetAdaptiveBitrateInfoResponse, error)
	// Streaming management
	GetStreamingURL(ctx context.Context, in *GetStreamingURLRequest, opts ...grpc.CallOption) (*GetStreamingURLResponse, error)
	ValidateStreamingAccess(ctx context.Context, in *ValidateStreamingAccessRequest, opts ...grpc.CallOption) (*ValidateStreamingAccessResponse, error)
	GetStreamingMetrics(ctx context.Context, in *GetStreamingMetricsRequest, opts ...grpc.CallOption) (*GetStreamingMetricsResponse, error)
	// Analytics and monitoring
	TrackPlaybackEvent(ctx context.Context, in *TrackPlaybackEventRequest, opts ...grpc.CallOption) (*TrackPlaybackEventResponse, error)
	GetPlaybackAnalytics(ctx context.Context, in *GetPlaybackAnalyticsRequest, opts ...grpc.CallOption) (*GetPlaybackAnalyticsResponse, error)
	GetStreamingPerformance(ctx context.Context, in *GetStreamingPerformanceRequest, opts ...grpc.CallOption) (*GetStreamingPerformanceResponse, error)
	// DRM and security
	GetDRMLicense(ctx context.Context, in *GetDRMLicenseRequest, opts ...grpc.CallOption) (*GetDRMLicenseResponse, error)
	ValidateDRMToken(ctx context.Context, in *ValidateDRMTokenRequest, opts ...grpc.CallOption) (*ValidateDRMTokenResponse, error)
	GetContentProtection(ctx context.Context, in *GetContentProtectionRequest, opts ...grpc.CallOption) (*GetContentProtectionResponse, error)
}

type playbackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlaybackServiceClient(cc grpc.ClientConnInterface) PlaybackServiceClient {
	return &playbackServiceClient{cc}
}

func (c *playbackServiceClient) CreatePlaybackSession(ctx context.Context, in *CreatePlaybackSessionRequest, opts ...grpc.CallOption) (*CreatePlaybackSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePlaybackSessionResponse)
	err := c.cc.Invoke(ctx, PlaybackService_CreatePlaybackSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbackServiceClient) GetPlaybackSession(ctx context.Context, in *GetPlaybackSessionRequest, opts ...grpc.CallOption) (*GetPlaybackSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlaybackSessionResponse)
	err := c.cc.Invoke(ctx, PlaybackService_GetPlaybackSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbackServiceClient) UpdatePlaybackSession(ctx context.Context, in *UpdatePlaybackSessionRequest, opts ...grpc.CallOption) (*UpdatePlaybackSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePlaybackSessionResponse)
	err := c.cc.Invoke(ctx, PlaybackService_UpdatePlaybackSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbackServiceClient) EndPlaybackSession(ctx context.Context, in *EndPlaybackSessionRequest, opts ...grpc.CallOption) (*EndPlaybackSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EndPlaybackSessionResponse)
	err := c.cc.Invoke(ctx, PlaybackService_EndPlaybackSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbackServiceClient) StartPlayback(ctx context.Context, in *StartPlaybackRequest, opts ...grpc.CallOption) (*StartPlaybackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartPlaybackResponse)
	err := c.cc.Invoke(ctx, PlaybackService_StartPlayback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbackServiceClient) PausePlayback(ctx context.Context, in *PausePlaybackRequest, opts ...grpc.CallOption) (*PausePlaybackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PausePlaybackResponse)
	err := c.cc.Invoke(ctx, PlaybackService_PausePlayback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbackServiceClient) ResumePlayback(ctx context.Context, in *ResumePlaybackRequest, opts ...grpc.CallOption) (*ResumePlaybackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResumePlaybackResponse)
	err := c.cc.Invoke(ctx, PlaybackService_ResumePlayback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbackServiceClient) StopPlayback(ctx context.Context, in *StopPlaybackRequest, opts ...grpc.CallOption) (*StopPlaybackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopPlaybackResponse)
	err := c.cc.Invoke(ctx, PlaybackService_StopPlayback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbackServiceClient) SeekPlayback(ctx context.Context, in *SeekPlaybackRequest, opts ...grpc.CallOption) (*SeekPlaybackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SeekPlaybackResponse)
	err := c.cc.Invoke(ctx, PlaybackService_SeekPlayback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbackServiceClient) UpdatePlaybackProgress(ctx context.Context, in *UpdatePlaybackProgressRequest, opts ...grpc.CallOption) (*UpdatePlaybackProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePlaybackProgressResponse)
	err := c.cc.Invoke(ctx, PlaybackService_UpdatePlaybackProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbackServiceClient) GetPlaybackProgress(ctx context.Context, in *GetPlaybackProgressRequest, opts ...grpc.CallOption) (*GetPlaybackProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlaybackProgressResponse)
	err := c.cc.Invoke(ctx, PlaybackService_GetPlaybackProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbackServiceClient) GetPlaybackHistory(ctx context.Context, in *GetPlaybackHistoryRequest, opts ...grpc.CallOption) (*GetPlaybackHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlaybackHistoryResponse)
	err := c.cc.Invoke(ctx, PlaybackService_GetPlaybackHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbackServiceClient) GetAvailableQualities(ctx context.Context, in *GetAvailableQualitiesRequest, opts ...grpc.CallOption) (*GetAvailableQualitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAvailableQualitiesResponse)
	err := c.cc.Invoke(ctx, PlaybackService_GetAvailableQualities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbackServiceClient) ChangePlaybackQuality(ctx context.Context, in *ChangePlaybackQualityRequest, opts ...grpc.CallOption) (*ChangePlaybackQualityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangePlaybackQualityResponse)
	err := c.cc.Invoke(ctx, PlaybackService_ChangePlaybackQuality_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbackServiceClient) GetAdaptiveBitrateInfo(ctx context.Context, in *GetAdaptiveBitrateInfoRequest, opts ...grpc.CallOption) (*GetAdaptiveBitrateInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAdaptiveBitrateInfoResponse)
	err := c.cc.Invoke(ctx, PlaybackService_GetAdaptiveBitrateInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbackServiceClient) GetStreamingURL(ctx context.Context, in *GetStreamingURLRequest, opts ...grpc.CallOption) (*GetStreamingURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStreamingURLResponse)
	err := c.cc.Invoke(ctx, PlaybackService_GetStreamingURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbackServiceClient) ValidateStreamingAccess(ctx context.Context, in *ValidateStreamingAccessRequest, opts ...grpc.CallOption) (*ValidateStreamingAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateStreamingAccessResponse)
	err := c.cc.Invoke(ctx, PlaybackService_ValidateStreamingAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbackServiceClient) GetStreamingMetrics(ctx context.Context, in *GetStreamingMetricsRequest, opts ...grpc.CallOption) (*GetStreamingMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStreamingMetricsResponse)
	err := c.cc.Invoke(ctx, PlaybackService_GetStreamingMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbackServiceClient) TrackPlaybackEvent(ctx context.Context, in *TrackPlaybackEventRequest, opts ...grpc.CallOption) (*TrackPlaybackEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackPlaybackEventResponse)
	err := c.cc.Invoke(ctx, PlaybackService_TrackPlaybackEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbackServiceClient) GetPlaybackAnalytics(ctx context.Context, in *GetPlaybackAnalyticsRequest, opts ...grpc.CallOption) (*GetPlaybackAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlaybackAnalyticsResponse)
	err := c.cc.Invoke(ctx, PlaybackService_GetPlaybackAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbackServiceClient) GetStreamingPerformance(ctx context.Context, in *GetStreamingPerformanceRequest, opts ...grpc.CallOption) (*GetStreamingPerformanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStreamingPerformanceResponse)
	err := c.cc.Invoke(ctx, PlaybackService_GetStreamingPerformance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbackServiceClient) GetDRMLicense(ctx context.Context, in *GetDRMLicenseRequest, opts ...grpc.CallOption) (*GetDRMLicenseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDRMLicenseResponse)
	err := c.cc.Invoke(ctx, PlaybackService_GetDRMLicense_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbackServiceClient) ValidateDRMToken(ctx context.Context, in *ValidateDRMTokenRequest, opts ...grpc.CallOption) (*ValidateDRMTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateDRMTokenResponse)
	err := c.cc.Invoke(ctx, PlaybackService_ValidateDRMToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playbackServiceClient) GetContentProtection(ctx context.Context, in *GetContentProtectionRequest, opts ...grpc.CallOption) (*GetContentProtectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContentProtectionResponse)
	err := c.cc.Invoke(ctx, PlaybackService_GetContentProtection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlaybackServiceServer is the server API for PlaybackService service.
// All implementations must embed UnimplementedPlaybackServiceServer
// for forward compatibility.
//
// Streaming and playback management service
type PlaybackServiceServer interface {
	// Session management
	CreatePlaybackSession(context.Context, *CreatePlaybackSessionRequest) (*CreatePlaybackSessionResponse, error)
	GetPlaybackSession(context.Context, *GetPlaybackSessionRequest) (*GetPlaybackSessionResponse, error)
	UpdatePlaybackSession(context.Context, *UpdatePlaybackSessionRequest) (*UpdatePlaybackSessionResponse, error)
	EndPlaybackSession(context.Context, *EndPlaybackSessionRequest) (*EndPlaybackSessionResponse, error)
	// Playback control
	StartPlayback(context.Context, *StartPlaybackRequest) (*StartPlaybackResponse, error)
	PausePlayback(context.Context, *PausePlaybackRequest) (*PausePlaybackResponse, error)
	ResumePlayback(context.Context, *ResumePlaybackRequest) (*ResumePlaybackResponse, error)
	StopPlayback(context.Context, *StopPlaybackRequest) (*StopPlaybackResponse, error)
	SeekPlayback(context.Context, *SeekPlaybackRequest) (*SeekPlaybackResponse, error)
	// Progress tracking
	UpdatePlaybackProgress(context.Context, *UpdatePlaybackProgressRequest) (*UpdatePlaybackProgressResponse, error)
	GetPlaybackProgress(context.Context, *GetPlaybackProgressRequest) (*GetPlaybackProgressResponse, error)
	GetPlaybackHistory(context.Context, *GetPlaybackHistoryRequest) (*GetPlaybackHistoryResponse, error)
	// Quality adaptation
	GetAvailableQualities(context.Context, *GetAvailableQualitiesRequest) (*GetAvailableQualitiesResponse, error)
	ChangePlaybackQuality(context.Context, *ChangePlaybackQualityRequest) (*ChangePlaybackQualityResponse, error)
	GetAdaptiveBitrateInfo(context.Context, *GetAdaptiveBitrateInfoRequest) (*GetAdaptiveBitrateInfoResponse, error)
	// Streaming management
	GetStreamingURL(context.Context, *GetStreamingURLRequest) (*GetStreamingURLResponse, error)
	ValidateStreamingAccess(context.Context, *ValidateStreamingAccessRequest) (*ValidateStreamingAccessResponse, error)
	GetStreamingMetrics(context.Context, *GetStreamingMetricsRequest) (*GetStreamingMetricsResponse, error)
	// Analytics and monitoring
	TrackPlaybackEvent(context.Context, *TrackPlaybackEventRequest) (*TrackPlaybackEventResponse, error)
	GetPlaybackAnalytics(context.Context, *GetPlaybackAnalyticsRequest) (*GetPlaybackAnalyticsResponse, error)
	GetStreamingPerformance(context.Context, *GetStreamingPerformanceRequest) (*GetStreamingPerformanceResponse, error)
	// DRM and security
	GetDRMLicense(context.Context, *GetDRMLicenseRequest) (*GetDRMLicenseResponse, error)
	ValidateDRMToken(context.Context, *ValidateDRMTokenRequest) (*ValidateDRMTokenResponse, error)
	GetContentProtection(context.Context, *GetContentProtectionRequest) (*GetContentProtectionResponse, error)
	mustEmbedUnimplementedPlaybackServiceServer()
}

// UnimplementedPlaybackServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPlaybackServiceServer struct{}

func (UnimplementedPlaybackServiceServer) CreatePlaybackSession(context.Context, *CreatePlaybackSessionRequest) (*CreatePlaybackSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlaybackSession not implemented")
}
func (UnimplementedPlaybackServiceServer) GetPlaybackSession(context.Context, *GetPlaybackSessionRequest) (*GetPlaybackSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaybackSession not implemented")
}
func (UnimplementedPlaybackServiceServer) UpdatePlaybackSession(context.Context, *UpdatePlaybackSessionRequest) (*UpdatePlaybackSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlaybackSession not implemented")
}
func (UnimplementedPlaybackServiceServer) EndPlaybackSession(context.Context, *EndPlaybackSessionRequest) (*EndPlaybackSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndPlaybackSession not implemented")
}
func (UnimplementedPlaybackServiceServer) StartPlayback(context.Context, *StartPlaybackRequest) (*StartPlaybackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartPlayback not implemented")
}
func (UnimplementedPlaybackServiceServer) PausePlayback(context.Context, *PausePlaybackRequest) (*PausePlaybackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PausePlayback not implemented")
}
func (UnimplementedPlaybackServiceServer) ResumePlayback(context.Context, *ResumePlaybackRequest) (*ResumePlaybackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumePlayback not implemented")
}
func (UnimplementedPlaybackServiceServer) StopPlayback(context.Context, *StopPlaybackRequest) (*StopPlaybackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopPlayback not implemented")
}
func (UnimplementedPlaybackServiceServer) SeekPlayback(context.Context, *SeekPlaybackRequest) (*SeekPlaybackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeekPlayback not implemented")
}
func (UnimplementedPlaybackServiceServer) UpdatePlaybackProgress(context.Context, *UpdatePlaybackProgressRequest) (*UpdatePlaybackProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlaybackProgress not implemented")
}
func (UnimplementedPlaybackServiceServer) GetPlaybackProgress(context.Context, *GetPlaybackProgressRequest) (*GetPlaybackProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaybackProgress not implemented")
}
func (UnimplementedPlaybackServiceServer) GetPlaybackHistory(context.Context, *GetPlaybackHistoryRequest) (*GetPlaybackHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaybackHistory not implemented")
}
func (UnimplementedPlaybackServiceServer) GetAvailableQualities(context.Context, *GetAvailableQualitiesRequest) (*GetAvailableQualitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableQualities not implemented")
}
func (UnimplementedPlaybackServiceServer) ChangePlaybackQuality(context.Context, *ChangePlaybackQualityRequest) (*ChangePlaybackQualityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePlaybackQuality not implemented")
}
func (UnimplementedPlaybackServiceServer) GetAdaptiveBitrateInfo(context.Context, *GetAdaptiveBitrateInfoRequest) (*GetAdaptiveBitrateInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdaptiveBitrateInfo not implemented")
}
func (UnimplementedPlaybackServiceServer) GetStreamingURL(context.Context, *GetStreamingURLRequest) (*GetStreamingURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamingURL not implemented")
}
func (UnimplementedPlaybackServiceServer) ValidateStreamingAccess(context.Context, *ValidateStreamingAccessRequest) (*ValidateStreamingAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateStreamingAccess not implemented")
}
func (UnimplementedPlaybackServiceServer) GetStreamingMetrics(context.Context, *GetStreamingMetricsRequest) (*GetStreamingMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamingMetrics not implemented")
}
func (UnimplementedPlaybackServiceServer) TrackPlaybackEvent(context.Context, *TrackPlaybackEventRequest) (*TrackPlaybackEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackPlaybackEvent not implemented")
}
func (UnimplementedPlaybackServiceServer) GetPlaybackAnalytics(context.Context, *GetPlaybackAnalyticsRequest) (*GetPlaybackAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaybackAnalytics not implemented")
}
func (UnimplementedPlaybackServiceServer) GetStreamingPerformance(context.Context, *GetStreamingPerformanceRequest) (*GetStreamingPerformanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamingPerformance not implemented")
}
func (UnimplementedPlaybackServiceServer) GetDRMLicense(context.Context, *GetDRMLicenseRequest) (*GetDRMLicenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDRMLicense not implemented")
}
func (UnimplementedPlaybackServiceServer) ValidateDRMToken(context.Context, *ValidateDRMTokenRequest) (*ValidateDRMTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateDRMToken not implemented")
}
func (UnimplementedPlaybackServiceServer) GetContentProtection(context.Context, *GetContentProtectionRequest) (*GetContentProtectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContentProtection not implemented")
}
func (UnimplementedPlaybackServiceServer) mustEmbedUnimplementedPlaybackServiceServer() {}
func (UnimplementedPlaybackServiceServer) testEmbeddedByValue()                         {}

// UnsafePlaybackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaybackServiceServer will
// result in compilation errors.
type UnsafePlaybackServiceServer interface {
	mustEmbedUnimplementedPlaybackServiceServer()
}

func RegisterPlaybackServiceServer(s grpc.ServiceRegistrar, srv PlaybackServiceServer) {
	// If the following call pancis, it indicates UnimplementedPlaybackServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PlaybackService_ServiceDesc, srv)
}

func _PlaybackService_CreatePlaybackSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlaybackSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybackServiceServer).CreatePlaybackSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaybackService_CreatePlaybackSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybackServiceServer).CreatePlaybackSession(ctx, req.(*CreatePlaybackSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaybackService_GetPlaybackSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlaybackSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybackServiceServer).GetPlaybackSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaybackService_GetPlaybackSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybackServiceServer).GetPlaybackSession(ctx, req.(*GetPlaybackSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaybackService_UpdatePlaybackSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlaybackSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybackServiceServer).UpdatePlaybackSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaybackService_UpdatePlaybackSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybackServiceServer).UpdatePlaybackSession(ctx, req.(*UpdatePlaybackSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaybackService_EndPlaybackSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndPlaybackSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybackServiceServer).EndPlaybackSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaybackService_EndPlaybackSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybackServiceServer).EndPlaybackSession(ctx, req.(*EndPlaybackSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaybackService_StartPlayback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartPlaybackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybackServiceServer).StartPlayback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaybackService_StartPlayback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybackServiceServer).StartPlayback(ctx, req.(*StartPlaybackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaybackService_PausePlayback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PausePlaybackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybackServiceServer).PausePlayback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaybackService_PausePlayback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybackServiceServer).PausePlayback(ctx, req.(*PausePlaybackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaybackService_ResumePlayback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumePlaybackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybackServiceServer).ResumePlayback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaybackService_ResumePlayback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybackServiceServer).ResumePlayback(ctx, req.(*ResumePlaybackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaybackService_StopPlayback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopPlaybackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybackServiceServer).StopPlayback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaybackService_StopPlayback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybackServiceServer).StopPlayback(ctx, req.(*StopPlaybackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaybackService_SeekPlayback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeekPlaybackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybackServiceServer).SeekPlayback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaybackService_SeekPlayback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybackServiceServer).SeekPlayback(ctx, req.(*SeekPlaybackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaybackService_UpdatePlaybackProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlaybackProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybackServiceServer).UpdatePlaybackProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaybackService_UpdatePlaybackProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybackServiceServer).UpdatePlaybackProgress(ctx, req.(*UpdatePlaybackProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaybackService_GetPlaybackProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlaybackProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybackServiceServer).GetPlaybackProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaybackService_GetPlaybackProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybackServiceServer).GetPlaybackProgress(ctx, req.(*GetPlaybackProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaybackService_GetPlaybackHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlaybackHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybackServiceServer).GetPlaybackHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaybackService_GetPlaybackHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybackServiceServer).GetPlaybackHistory(ctx, req.(*GetPlaybackHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaybackService_GetAvailableQualities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableQualitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybackServiceServer).GetAvailableQualities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaybackService_GetAvailableQualities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybackServiceServer).GetAvailableQualities(ctx, req.(*GetAvailableQualitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaybackService_ChangePlaybackQuality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePlaybackQualityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybackServiceServer).ChangePlaybackQuality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaybackService_ChangePlaybackQuality_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybackServiceServer).ChangePlaybackQuality(ctx, req.(*ChangePlaybackQualityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaybackService_GetAdaptiveBitrateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdaptiveBitrateInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybackServiceServer).GetAdaptiveBitrateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaybackService_GetAdaptiveBitrateInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybackServiceServer).GetAdaptiveBitrateInfo(ctx, req.(*GetAdaptiveBitrateInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaybackService_GetStreamingURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamingURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybackServiceServer).GetStreamingURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaybackService_GetStreamingURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybackServiceServer).GetStreamingURL(ctx, req.(*GetStreamingURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaybackService_ValidateStreamingAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateStreamingAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybackServiceServer).ValidateStreamingAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaybackService_ValidateStreamingAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybackServiceServer).ValidateStreamingAccess(ctx, req.(*ValidateStreamingAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaybackService_GetStreamingMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamingMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybackServiceServer).GetStreamingMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaybackService_GetStreamingMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybackServiceServer).GetStreamingMetrics(ctx, req.(*GetStreamingMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaybackService_TrackPlaybackEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackPlaybackEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybackServiceServer).TrackPlaybackEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaybackService_TrackPlaybackEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybackServiceServer).TrackPlaybackEvent(ctx, req.(*TrackPlaybackEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaybackService_GetPlaybackAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlaybackAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybackServiceServer).GetPlaybackAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaybackService_GetPlaybackAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybackServiceServer).GetPlaybackAnalytics(ctx, req.(*GetPlaybackAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaybackService_GetStreamingPerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamingPerformanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybackServiceServer).GetStreamingPerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaybackService_GetStreamingPerformance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybackServiceServer).GetStreamingPerformance(ctx, req.(*GetStreamingPerformanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaybackService_GetDRMLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDRMLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybackServiceServer).GetDRMLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaybackService_GetDRMLicense_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybackServiceServer).GetDRMLicense(ctx, req.(*GetDRMLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaybackService_ValidateDRMToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateDRMTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybackServiceServer).ValidateDRMToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaybackService_ValidateDRMToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybackServiceServer).ValidateDRMToken(ctx, req.(*ValidateDRMTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaybackService_GetContentProtection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContentProtectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaybackServiceServer).GetContentProtection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaybackService_GetContentProtection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaybackServiceServer).GetContentProtection(ctx, req.(*GetContentProtectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlaybackService_ServiceDesc is the grpc.ServiceDesc for PlaybackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlaybackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.playback.PlaybackService",
	HandlerType: (*PlaybackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlaybackSession",
			Handler:    _PlaybackService_CreatePlaybackSession_Handler,
		},
		{
			MethodName: "GetPlaybackSession",
			Handler:    _PlaybackService_GetPlaybackSession_Handler,
		},
		{
			MethodName: "UpdatePlaybackSession",
			Handler:    _PlaybackService_UpdatePlaybackSession_Handler,
		},
		{
			MethodName: "EndPlaybackSession",
			Handler:    _PlaybackService_EndPlaybackSession_Handler,
		},
		{
			MethodName: "StartPlayback",
			Handler:    _PlaybackService_StartPlayback_Handler,
		},
		{
			MethodName: "PausePlayback",
			Handler:    _PlaybackService_PausePlayback_Handler,
		},
		{
			MethodName: "ResumePlayback",
			Handler:    _PlaybackService_ResumePlayback_Handler,
		},
		{
			MethodName: "StopPlayback",
			Handler:    _PlaybackService_StopPlayback_Handler,
		},
		{
			MethodName: "SeekPlayback",
			Handler:    _PlaybackService_SeekPlayback_Handler,
		},
		{
			MethodName: "UpdatePlaybackProgress",
			Handler:    _PlaybackService_UpdatePlaybackProgress_Handler,
		},
		{
			MethodName: "GetPlaybackProgress",
			Handler:    _PlaybackService_GetPlaybackProgress_Handler,
		},
		{
			MethodName: "GetPlaybackHistory",
			Handler:    _PlaybackService_GetPlaybackHistory_Handler,
		},
		{
			MethodName: "GetAvailableQualities",
			Handler:    _PlaybackService_GetAvailableQualities_Handler,
		},
		{
			MethodName: "ChangePlaybackQuality",
			Handler:    _PlaybackService_ChangePlaybackQuality_Handler,
		},
		{
			MethodName: "GetAdaptiveBitrateInfo",
			Handler:    _PlaybackService_GetAdaptiveBitrateInfo_Handler,
		},
		{
			MethodName: "GetStreamingURL",
			Handler:    _PlaybackService_GetStreamingURL_Handler,
		},
		{
			MethodName: "ValidateStreamingAccess",
			Handler:    _PlaybackService_ValidateStreamingAccess_Handler,
		},
		{
			MethodName: "GetStreamingMetrics",
			Handler:    _PlaybackService_GetStreamingMetrics_Handler,
		},
		{
			MethodName: "TrackPlaybackEvent",
			Handler:    _PlaybackService_TrackPlaybackEvent_Handler,
		},
		{
			MethodName: "GetPlaybackAnalytics",
			Handler:    _PlaybackService_GetPlaybackAnalytics_Handler,
		},
		{
			MethodName: "GetStreamingPerformance",
			Handler:    _PlaybackService_GetStreamingPerformance_Handler,
		},
		{
			MethodName: "GetDRMLicense",
			Handler:    _PlaybackService_GetDRMLicense_Handler,
		},
		{
			MethodName: "ValidateDRMToken",
			Handler:    _PlaybackService_ValidateDRMToken_Handler,
		},
		{
			MethodName: "GetContentProtection",
			Handler:    _PlaybackService_GetContentProtection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "playback/playback_service.proto",
}
