// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: notification/notification_service.proto

package notification

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NotificationService_SendUserNotification_FullMethodName          = "/proto.notification.NotificationService/SendUserNotification"
	NotificationService_GetUserNotifications_FullMethodName          = "/proto.notification.NotificationService/GetUserNotifications"
	NotificationService_MarkNotificationRead_FullMethodName          = "/proto.notification.NotificationService/MarkNotificationRead"
	NotificationService_DeleteNotification_FullMethodName            = "/proto.notification.NotificationService/DeleteNotification"
	NotificationService_SendEmailNotification_FullMethodName         = "/proto.notification.NotificationService/SendEmailNotification"
	NotificationService_SendEmailTemplate_FullMethodName             = "/proto.notification.NotificationService/SendEmailTemplate"
	NotificationService_GetEmailStatus_FullMethodName                = "/proto.notification.NotificationService/GetEmailStatus"
	NotificationService_ResendEmail_FullMethodName                   = "/proto.notification.NotificationService/ResendEmail"
	NotificationService_SendPushNotification_FullMethodName          = "/proto.notification.NotificationService/SendPushNotification"
	NotificationService_RegisterPushToken_FullMethodName             = "/proto.notification.NotificationService/RegisterPushToken"
	NotificationService_UnregisterPushToken_FullMethodName           = "/proto.notification.NotificationService/UnregisterPushToken"
	NotificationService_GetPushDeliveryStatus_FullMethodName         = "/proto.notification.NotificationService/GetPushDeliveryStatus"
	NotificationService_SendMarketingEmail_FullMethodName            = "/proto.notification.NotificationService/SendMarketingEmail"
	NotificationService_SendMarketingPush_FullMethodName             = "/proto.notification.NotificationService/SendMarketingPush"
	NotificationService_GetMarketingCampaigns_FullMethodName         = "/proto.notification.NotificationService/GetMarketingCampaigns"
	NotificationService_TrackMarketingEvent_FullMethodName           = "/proto.notification.NotificationService/TrackMarketingEvent"
	NotificationService_GetNotificationPreferences_FullMethodName    = "/proto.notification.NotificationService/GetNotificationPreferences"
	NotificationService_UpdateNotificationPreferences_FullMethodName = "/proto.notification.NotificationService/UpdateNotificationPreferences"
	NotificationService_SubscribeToNotifications_FullMethodName      = "/proto.notification.NotificationService/SubscribeToNotifications"
	NotificationService_UnsubscribeFromNotifications_FullMethodName  = "/proto.notification.NotificationService/UnsubscribeFromNotifications"
	NotificationService_GetNotificationTemplates_FullMethodName      = "/proto.notification.NotificationService/GetNotificationTemplates"
	NotificationService_CreateNotificationTemplate_FullMethodName    = "/proto.notification.NotificationService/CreateNotificationTemplate"
	NotificationService_UpdateNotificationTemplate_FullMethodName    = "/proto.notification.NotificationService/UpdateNotificationTemplate"
	NotificationService_DeleteNotificationTemplate_FullMethodName    = "/proto.notification.NotificationService/DeleteNotificationTemplate"
	NotificationService_GetNotificationAnalytics_FullMethodName      = "/proto.notification.NotificationService/GetNotificationAnalytics"
	NotificationService_GetDeliveryReports_FullMethodName            = "/proto.notification.NotificationService/GetDeliveryReports"
	NotificationService_GetEngagementMetrics_FullMethodName          = "/proto.notification.NotificationService/GetEngagementMetrics"
)

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Notification and communication service
type NotificationServiceClient interface {
	// User notifications
	SendUserNotification(ctx context.Context, in *SendUserNotificationRequest, opts ...grpc.CallOption) (*SendUserNotificationResponse, error)
	GetUserNotifications(ctx context.Context, in *GetUserNotificationsRequest, opts ...grpc.CallOption) (*GetUserNotificationsResponse, error)
	MarkNotificationRead(ctx context.Context, in *MarkNotificationReadRequest, opts ...grpc.CallOption) (*MarkNotificationReadResponse, error)
	DeleteNotification(ctx context.Context, in *DeleteNotificationRequest, opts ...grpc.CallOption) (*DeleteNotificationResponse, error)
	// Email notifications
	SendEmailNotification(ctx context.Context, in *SendEmailNotificationRequest, opts ...grpc.CallOption) (*SendEmailNotificationResponse, error)
	SendEmailTemplate(ctx context.Context, in *SendEmailTemplateRequest, opts ...grpc.CallOption) (*SendEmailTemplateResponse, error)
	GetEmailStatus(ctx context.Context, in *GetEmailStatusRequest, opts ...grpc.CallOption) (*GetEmailStatusResponse, error)
	ResendEmail(ctx context.Context, in *ResendEmailRequest, opts ...grpc.CallOption) (*ResendEmailResponse, error)
	// Push notifications
	SendPushNotification(ctx context.Context, in *SendPushNotificationRequest, opts ...grpc.CallOption) (*SendPushNotificationResponse, error)
	RegisterPushToken(ctx context.Context, in *RegisterPushTokenRequest, opts ...grpc.CallOption) (*RegisterPushTokenResponse, error)
	UnregisterPushToken(ctx context.Context, in *UnregisterPushTokenRequest, opts ...grpc.CallOption) (*UnregisterPushTokenResponse, error)
	GetPushDeliveryStatus(ctx context.Context, in *GetPushDeliveryStatusRequest, opts ...grpc.CallOption) (*GetPushDeliveryStatusResponse, error)
	// Marketing communications
	SendMarketingEmail(ctx context.Context, in *SendMarketingEmailRequest, opts ...grpc.CallOption) (*SendMarketingEmailResponse, error)
	SendMarketingPush(ctx context.Context, in *SendMarketingPushRequest, opts ...grpc.CallOption) (*SendMarketingPushResponse, error)
	GetMarketingCampaigns(ctx context.Context, in *GetMarketingCampaignsRequest, opts ...grpc.CallOption) (*GetMarketingCampaignsResponse, error)
	TrackMarketingEvent(ctx context.Context, in *TrackMarketingEventRequest, opts ...grpc.CallOption) (*TrackMarketingEventResponse, error)
	// Preference management
	GetNotificationPreferences(ctx context.Context, in *GetNotificationPreferencesRequest, opts ...grpc.CallOption) (*GetNotificationPreferencesResponse, error)
	UpdateNotificationPreferences(ctx context.Context, in *UpdateNotificationPreferencesRequest, opts ...grpc.CallOption) (*UpdateNotificationPreferencesResponse, error)
	SubscribeToNotifications(ctx context.Context, in *SubscribeToNotificationsRequest, opts ...grpc.CallOption) (*SubscribeToNotificationsResponse, error)
	UnsubscribeFromNotifications(ctx context.Context, in *UnsubscribeFromNotificationsRequest, opts ...grpc.CallOption) (*UnsubscribeFromNotificationsResponse, error)
	// Template management
	GetNotificationTemplates(ctx context.Context, in *GetNotificationTemplatesRequest, opts ...grpc.CallOption) (*GetNotificationTemplatesResponse, error)
	CreateNotificationTemplate(ctx context.Context, in *CreateNotificationTemplateRequest, opts ...grpc.CallOption) (*CreateNotificationTemplateResponse, error)
	UpdateNotificationTemplate(ctx context.Context, in *UpdateNotificationTemplateRequest, opts ...grpc.CallOption) (*UpdateNotificationTemplateResponse, error)
	DeleteNotificationTemplate(ctx context.Context, in *DeleteNotificationTemplateRequest, opts ...grpc.CallOption) (*DeleteNotificationTemplateResponse, error)
	// Analytics and reporting
	GetNotificationAnalytics(ctx context.Context, in *GetNotificationAnalyticsRequest, opts ...grpc.CallOption) (*GetNotificationAnalyticsResponse, error)
	GetDeliveryReports(ctx context.Context, in *GetDeliveryReportsRequest, opts ...grpc.CallOption) (*GetDeliveryReportsResponse, error)
	GetEngagementMetrics(ctx context.Context, in *GetEngagementMetricsRequest, opts ...grpc.CallOption) (*GetEngagementMetricsResponse, error)
}

type notificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceClient(cc grpc.ClientConnInterface) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) SendUserNotification(ctx context.Context, in *SendUserNotificationRequest, opts ...grpc.CallOption) (*SendUserNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendUserNotificationResponse)
	err := c.cc.Invoke(ctx, NotificationService_SendUserNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetUserNotifications(ctx context.Context, in *GetUserNotificationsRequest, opts ...grpc.CallOption) (*GetUserNotificationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserNotificationsResponse)
	err := c.cc.Invoke(ctx, NotificationService_GetUserNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) MarkNotificationRead(ctx context.Context, in *MarkNotificationReadRequest, opts ...grpc.CallOption) (*MarkNotificationReadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkNotificationReadResponse)
	err := c.cc.Invoke(ctx, NotificationService_MarkNotificationRead_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) DeleteNotification(ctx context.Context, in *DeleteNotificationRequest, opts ...grpc.CallOption) (*DeleteNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteNotificationResponse)
	err := c.cc.Invoke(ctx, NotificationService_DeleteNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendEmailNotification(ctx context.Context, in *SendEmailNotificationRequest, opts ...grpc.CallOption) (*SendEmailNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendEmailNotificationResponse)
	err := c.cc.Invoke(ctx, NotificationService_SendEmailNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendEmailTemplate(ctx context.Context, in *SendEmailTemplateRequest, opts ...grpc.CallOption) (*SendEmailTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendEmailTemplateResponse)
	err := c.cc.Invoke(ctx, NotificationService_SendEmailTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetEmailStatus(ctx context.Context, in *GetEmailStatusRequest, opts ...grpc.CallOption) (*GetEmailStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEmailStatusResponse)
	err := c.cc.Invoke(ctx, NotificationService_GetEmailStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) ResendEmail(ctx context.Context, in *ResendEmailRequest, opts ...grpc.CallOption) (*ResendEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResendEmailResponse)
	err := c.cc.Invoke(ctx, NotificationService_ResendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendPushNotification(ctx context.Context, in *SendPushNotificationRequest, opts ...grpc.CallOption) (*SendPushNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendPushNotificationResponse)
	err := c.cc.Invoke(ctx, NotificationService_SendPushNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) RegisterPushToken(ctx context.Context, in *RegisterPushTokenRequest, opts ...grpc.CallOption) (*RegisterPushTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterPushTokenResponse)
	err := c.cc.Invoke(ctx, NotificationService_RegisterPushToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) UnregisterPushToken(ctx context.Context, in *UnregisterPushTokenRequest, opts ...grpc.CallOption) (*UnregisterPushTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnregisterPushTokenResponse)
	err := c.cc.Invoke(ctx, NotificationService_UnregisterPushToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetPushDeliveryStatus(ctx context.Context, in *GetPushDeliveryStatusRequest, opts ...grpc.CallOption) (*GetPushDeliveryStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPushDeliveryStatusResponse)
	err := c.cc.Invoke(ctx, NotificationService_GetPushDeliveryStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendMarketingEmail(ctx context.Context, in *SendMarketingEmailRequest, opts ...grpc.CallOption) (*SendMarketingEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMarketingEmailResponse)
	err := c.cc.Invoke(ctx, NotificationService_SendMarketingEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendMarketingPush(ctx context.Context, in *SendMarketingPushRequest, opts ...grpc.CallOption) (*SendMarketingPushResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMarketingPushResponse)
	err := c.cc.Invoke(ctx, NotificationService_SendMarketingPush_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetMarketingCampaigns(ctx context.Context, in *GetMarketingCampaignsRequest, opts ...grpc.CallOption) (*GetMarketingCampaignsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMarketingCampaignsResponse)
	err := c.cc.Invoke(ctx, NotificationService_GetMarketingCampaigns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) TrackMarketingEvent(ctx context.Context, in *TrackMarketingEventRequest, opts ...grpc.CallOption) (*TrackMarketingEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackMarketingEventResponse)
	err := c.cc.Invoke(ctx, NotificationService_TrackMarketingEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetNotificationPreferences(ctx context.Context, in *GetNotificationPreferencesRequest, opts ...grpc.CallOption) (*GetNotificationPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNotificationPreferencesResponse)
	err := c.cc.Invoke(ctx, NotificationService_GetNotificationPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) UpdateNotificationPreferences(ctx context.Context, in *UpdateNotificationPreferencesRequest, opts ...grpc.CallOption) (*UpdateNotificationPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNotificationPreferencesResponse)
	err := c.cc.Invoke(ctx, NotificationService_UpdateNotificationPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SubscribeToNotifications(ctx context.Context, in *SubscribeToNotificationsRequest, opts ...grpc.CallOption) (*SubscribeToNotificationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscribeToNotificationsResponse)
	err := c.cc.Invoke(ctx, NotificationService_SubscribeToNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) UnsubscribeFromNotifications(ctx context.Context, in *UnsubscribeFromNotificationsRequest, opts ...grpc.CallOption) (*UnsubscribeFromNotificationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnsubscribeFromNotificationsResponse)
	err := c.cc.Invoke(ctx, NotificationService_UnsubscribeFromNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetNotificationTemplates(ctx context.Context, in *GetNotificationTemplatesRequest, opts ...grpc.CallOption) (*GetNotificationTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNotificationTemplatesResponse)
	err := c.cc.Invoke(ctx, NotificationService_GetNotificationTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) CreateNotificationTemplate(ctx context.Context, in *CreateNotificationTemplateRequest, opts ...grpc.CallOption) (*CreateNotificationTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNotificationTemplateResponse)
	err := c.cc.Invoke(ctx, NotificationService_CreateNotificationTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) UpdateNotificationTemplate(ctx context.Context, in *UpdateNotificationTemplateRequest, opts ...grpc.CallOption) (*UpdateNotificationTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNotificationTemplateResponse)
	err := c.cc.Invoke(ctx, NotificationService_UpdateNotificationTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) DeleteNotificationTemplate(ctx context.Context, in *DeleteNotificationTemplateRequest, opts ...grpc.CallOption) (*DeleteNotificationTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteNotificationTemplateResponse)
	err := c.cc.Invoke(ctx, NotificationService_DeleteNotificationTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetNotificationAnalytics(ctx context.Context, in *GetNotificationAnalyticsRequest, opts ...grpc.CallOption) (*GetNotificationAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNotificationAnalyticsResponse)
	err := c.cc.Invoke(ctx, NotificationService_GetNotificationAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetDeliveryReports(ctx context.Context, in *GetDeliveryReportsRequest, opts ...grpc.CallOption) (*GetDeliveryReportsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeliveryReportsResponse)
	err := c.cc.Invoke(ctx, NotificationService_GetDeliveryReports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetEngagementMetrics(ctx context.Context, in *GetEngagementMetricsRequest, opts ...grpc.CallOption) (*GetEngagementMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEngagementMetricsResponse)
	err := c.cc.Invoke(ctx, NotificationService_GetEngagementMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
// All implementations must embed UnimplementedNotificationServiceServer
// for forward compatibility.
//
// Notification and communication service
type NotificationServiceServer interface {
	// User notifications
	SendUserNotification(context.Context, *SendUserNotificationRequest) (*SendUserNotificationResponse, error)
	GetUserNotifications(context.Context, *GetUserNotificationsRequest) (*GetUserNotificationsResponse, error)
	MarkNotificationRead(context.Context, *MarkNotificationReadRequest) (*MarkNotificationReadResponse, error)
	DeleteNotification(context.Context, *DeleteNotificationRequest) (*DeleteNotificationResponse, error)
	// Email notifications
	SendEmailNotification(context.Context, *SendEmailNotificationRequest) (*SendEmailNotificationResponse, error)
	SendEmailTemplate(context.Context, *SendEmailTemplateRequest) (*SendEmailTemplateResponse, error)
	GetEmailStatus(context.Context, *GetEmailStatusRequest) (*GetEmailStatusResponse, error)
	ResendEmail(context.Context, *ResendEmailRequest) (*ResendEmailResponse, error)
	// Push notifications
	SendPushNotification(context.Context, *SendPushNotificationRequest) (*SendPushNotificationResponse, error)
	RegisterPushToken(context.Context, *RegisterPushTokenRequest) (*RegisterPushTokenResponse, error)
	UnregisterPushToken(context.Context, *UnregisterPushTokenRequest) (*UnregisterPushTokenResponse, error)
	GetPushDeliveryStatus(context.Context, *GetPushDeliveryStatusRequest) (*GetPushDeliveryStatusResponse, error)
	// Marketing communications
	SendMarketingEmail(context.Context, *SendMarketingEmailRequest) (*SendMarketingEmailResponse, error)
	SendMarketingPush(context.Context, *SendMarketingPushRequest) (*SendMarketingPushResponse, error)
	GetMarketingCampaigns(context.Context, *GetMarketingCampaignsRequest) (*GetMarketingCampaignsResponse, error)
	TrackMarketingEvent(context.Context, *TrackMarketingEventRequest) (*TrackMarketingEventResponse, error)
	// Preference management
	GetNotificationPreferences(context.Context, *GetNotificationPreferencesRequest) (*GetNotificationPreferencesResponse, error)
	UpdateNotificationPreferences(context.Context, *UpdateNotificationPreferencesRequest) (*UpdateNotificationPreferencesResponse, error)
	SubscribeToNotifications(context.Context, *SubscribeToNotificationsRequest) (*SubscribeToNotificationsResponse, error)
	UnsubscribeFromNotifications(context.Context, *UnsubscribeFromNotificationsRequest) (*UnsubscribeFromNotificationsResponse, error)
	// Template management
	GetNotificationTemplates(context.Context, *GetNotificationTemplatesRequest) (*GetNotificationTemplatesResponse, error)
	CreateNotificationTemplate(context.Context, *CreateNotificationTemplateRequest) (*CreateNotificationTemplateResponse, error)
	UpdateNotificationTemplate(context.Context, *UpdateNotificationTemplateRequest) (*UpdateNotificationTemplateResponse, error)
	DeleteNotificationTemplate(context.Context, *DeleteNotificationTemplateRequest) (*DeleteNotificationTemplateResponse, error)
	// Analytics and reporting
	GetNotificationAnalytics(context.Context, *GetNotificationAnalyticsRequest) (*GetNotificationAnalyticsResponse, error)
	GetDeliveryReports(context.Context, *GetDeliveryReportsRequest) (*GetDeliveryReportsResponse, error)
	GetEngagementMetrics(context.Context, *GetEngagementMetricsRequest) (*GetEngagementMetricsResponse, error)
	mustEmbedUnimplementedNotificationServiceServer()
}

// UnimplementedNotificationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotificationServiceServer struct{}

func (UnimplementedNotificationServiceServer) SendUserNotification(context.Context, *SendUserNotificationRequest) (*SendUserNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendUserNotification not implemented")
}
func (UnimplementedNotificationServiceServer) GetUserNotifications(context.Context, *GetUserNotificationsRequest) (*GetUserNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserNotifications not implemented")
}
func (UnimplementedNotificationServiceServer) MarkNotificationRead(context.Context, *MarkNotificationReadRequest) (*MarkNotificationReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkNotificationRead not implemented")
}
func (UnimplementedNotificationServiceServer) DeleteNotification(context.Context, *DeleteNotificationRequest) (*DeleteNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotification not implemented")
}
func (UnimplementedNotificationServiceServer) SendEmailNotification(context.Context, *SendEmailNotificationRequest) (*SendEmailNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailNotification not implemented")
}
func (UnimplementedNotificationServiceServer) SendEmailTemplate(context.Context, *SendEmailTemplateRequest) (*SendEmailTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailTemplate not implemented")
}
func (UnimplementedNotificationServiceServer) GetEmailStatus(context.Context, *GetEmailStatusRequest) (*GetEmailStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailStatus not implemented")
}
func (UnimplementedNotificationServiceServer) ResendEmail(context.Context, *ResendEmailRequest) (*ResendEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendEmail not implemented")
}
func (UnimplementedNotificationServiceServer) SendPushNotification(context.Context, *SendPushNotificationRequest) (*SendPushNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPushNotification not implemented")
}
func (UnimplementedNotificationServiceServer) RegisterPushToken(context.Context, *RegisterPushTokenRequest) (*RegisterPushTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPushToken not implemented")
}
func (UnimplementedNotificationServiceServer) UnregisterPushToken(context.Context, *UnregisterPushTokenRequest) (*UnregisterPushTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterPushToken not implemented")
}
func (UnimplementedNotificationServiceServer) GetPushDeliveryStatus(context.Context, *GetPushDeliveryStatusRequest) (*GetPushDeliveryStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPushDeliveryStatus not implemented")
}
func (UnimplementedNotificationServiceServer) SendMarketingEmail(context.Context, *SendMarketingEmailRequest) (*SendMarketingEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMarketingEmail not implemented")
}
func (UnimplementedNotificationServiceServer) SendMarketingPush(context.Context, *SendMarketingPushRequest) (*SendMarketingPushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMarketingPush not implemented")
}
func (UnimplementedNotificationServiceServer) GetMarketingCampaigns(context.Context, *GetMarketingCampaignsRequest) (*GetMarketingCampaignsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketingCampaigns not implemented")
}
func (UnimplementedNotificationServiceServer) TrackMarketingEvent(context.Context, *TrackMarketingEventRequest) (*TrackMarketingEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackMarketingEvent not implemented")
}
func (UnimplementedNotificationServiceServer) GetNotificationPreferences(context.Context, *GetNotificationPreferencesRequest) (*GetNotificationPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationPreferences not implemented")
}
func (UnimplementedNotificationServiceServer) UpdateNotificationPreferences(context.Context, *UpdateNotificationPreferencesRequest) (*UpdateNotificationPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotificationPreferences not implemented")
}
func (UnimplementedNotificationServiceServer) SubscribeToNotifications(context.Context, *SubscribeToNotificationsRequest) (*SubscribeToNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeToNotifications not implemented")
}
func (UnimplementedNotificationServiceServer) UnsubscribeFromNotifications(context.Context, *UnsubscribeFromNotificationsRequest) (*UnsubscribeFromNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeFromNotifications not implemented")
}
func (UnimplementedNotificationServiceServer) GetNotificationTemplates(context.Context, *GetNotificationTemplatesRequest) (*GetNotificationTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationTemplates not implemented")
}
func (UnimplementedNotificationServiceServer) CreateNotificationTemplate(context.Context, *CreateNotificationTemplateRequest) (*CreateNotificationTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotificationTemplate not implemented")
}
func (UnimplementedNotificationServiceServer) UpdateNotificationTemplate(context.Context, *UpdateNotificationTemplateRequest) (*UpdateNotificationTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotificationTemplate not implemented")
}
func (UnimplementedNotificationServiceServer) DeleteNotificationTemplate(context.Context, *DeleteNotificationTemplateRequest) (*DeleteNotificationTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotificationTemplate not implemented")
}
func (UnimplementedNotificationServiceServer) GetNotificationAnalytics(context.Context, *GetNotificationAnalyticsRequest) (*GetNotificationAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationAnalytics not implemented")
}
func (UnimplementedNotificationServiceServer) GetDeliveryReports(context.Context, *GetDeliveryReportsRequest) (*GetDeliveryReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeliveryReports not implemented")
}
func (UnimplementedNotificationServiceServer) GetEngagementMetrics(context.Context, *GetEngagementMetricsRequest) (*GetEngagementMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEngagementMetrics not implemented")
}
func (UnimplementedNotificationServiceServer) mustEmbedUnimplementedNotificationServiceServer() {}
func (UnimplementedNotificationServiceServer) testEmbeddedByValue()                             {}

// UnsafeNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServiceServer will
// result in compilation errors.
type UnsafeNotificationServiceServer interface {
	mustEmbedUnimplementedNotificationServiceServer()
}

func RegisterNotificationServiceServer(s grpc.ServiceRegistrar, srv NotificationServiceServer) {
	// If the following call pancis, it indicates UnimplementedNotificationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NotificationService_ServiceDesc, srv)
}

func _NotificationService_SendUserNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendUserNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendUserNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SendUserNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendUserNotification(ctx, req.(*SendUserNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetUserNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetUserNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_GetUserNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetUserNotifications(ctx, req.(*GetUserNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_MarkNotificationRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkNotificationReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).MarkNotificationRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_MarkNotificationRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).MarkNotificationRead(ctx, req.(*MarkNotificationReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_DeleteNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).DeleteNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_DeleteNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).DeleteNotification(ctx, req.(*DeleteNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendEmailNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendEmailNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SendEmailNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendEmailNotification(ctx, req.(*SendEmailNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendEmailTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendEmailTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SendEmailTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendEmailTemplate(ctx, req.(*SendEmailTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetEmailStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetEmailStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_GetEmailStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetEmailStatus(ctx, req.(*GetEmailStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_ResendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).ResendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_ResendEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).ResendEmail(ctx, req.(*ResendEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendPushNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPushNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendPushNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SendPushNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendPushNotification(ctx, req.(*SendPushNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_RegisterPushToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPushTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).RegisterPushToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_RegisterPushToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).RegisterPushToken(ctx, req.(*RegisterPushTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_UnregisterPushToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterPushTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).UnregisterPushToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_UnregisterPushToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).UnregisterPushToken(ctx, req.(*UnregisterPushTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetPushDeliveryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPushDeliveryStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetPushDeliveryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_GetPushDeliveryStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetPushDeliveryStatus(ctx, req.(*GetPushDeliveryStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendMarketingEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMarketingEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendMarketingEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SendMarketingEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendMarketingEmail(ctx, req.(*SendMarketingEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendMarketingPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMarketingPushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendMarketingPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SendMarketingPush_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendMarketingPush(ctx, req.(*SendMarketingPushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetMarketingCampaigns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketingCampaignsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetMarketingCampaigns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_GetMarketingCampaigns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetMarketingCampaigns(ctx, req.(*GetMarketingCampaignsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_TrackMarketingEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackMarketingEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).TrackMarketingEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_TrackMarketingEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).TrackMarketingEvent(ctx, req.(*TrackMarketingEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetNotificationPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetNotificationPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_GetNotificationPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetNotificationPreferences(ctx, req.(*GetNotificationPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_UpdateNotificationPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotificationPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).UpdateNotificationPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_UpdateNotificationPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).UpdateNotificationPreferences(ctx, req.(*UpdateNotificationPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SubscribeToNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeToNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SubscribeToNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SubscribeToNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SubscribeToNotifications(ctx, req.(*SubscribeToNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_UnsubscribeFromNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeFromNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).UnsubscribeFromNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_UnsubscribeFromNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).UnsubscribeFromNotifications(ctx, req.(*UnsubscribeFromNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetNotificationTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetNotificationTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_GetNotificationTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetNotificationTemplates(ctx, req.(*GetNotificationTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_CreateNotificationTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotificationTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).CreateNotificationTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_CreateNotificationTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).CreateNotificationTemplate(ctx, req.(*CreateNotificationTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_UpdateNotificationTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotificationTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).UpdateNotificationTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_UpdateNotificationTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).UpdateNotificationTemplate(ctx, req.(*UpdateNotificationTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_DeleteNotificationTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNotificationTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).DeleteNotificationTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_DeleteNotificationTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).DeleteNotificationTemplate(ctx, req.(*DeleteNotificationTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetNotificationAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetNotificationAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_GetNotificationAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetNotificationAnalytics(ctx, req.(*GetNotificationAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetDeliveryReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeliveryReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetDeliveryReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_GetDeliveryReports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetDeliveryReports(ctx, req.(*GetDeliveryReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetEngagementMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEngagementMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetEngagementMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_GetEngagementMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetEngagementMetrics(ctx, req.(*GetEngagementMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationService_ServiceDesc is the grpc.ServiceDesc for NotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.notification.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendUserNotification",
			Handler:    _NotificationService_SendUserNotification_Handler,
		},
		{
			MethodName: "GetUserNotifications",
			Handler:    _NotificationService_GetUserNotifications_Handler,
		},
		{
			MethodName: "MarkNotificationRead",
			Handler:    _NotificationService_MarkNotificationRead_Handler,
		},
		{
			MethodName: "DeleteNotification",
			Handler:    _NotificationService_DeleteNotification_Handler,
		},
		{
			MethodName: "SendEmailNotification",
			Handler:    _NotificationService_SendEmailNotification_Handler,
		},
		{
			MethodName: "SendEmailTemplate",
			Handler:    _NotificationService_SendEmailTemplate_Handler,
		},
		{
			MethodName: "GetEmailStatus",
			Handler:    _NotificationService_GetEmailStatus_Handler,
		},
		{
			MethodName: "ResendEmail",
			Handler:    _NotificationService_ResendEmail_Handler,
		},
		{
			MethodName: "SendPushNotification",
			Handler:    _NotificationService_SendPushNotification_Handler,
		},
		{
			MethodName: "RegisterPushToken",
			Handler:    _NotificationService_RegisterPushToken_Handler,
		},
		{
			MethodName: "UnregisterPushToken",
			Handler:    _NotificationService_UnregisterPushToken_Handler,
		},
		{
			MethodName: "GetPushDeliveryStatus",
			Handler:    _NotificationService_GetPushDeliveryStatus_Handler,
		},
		{
			MethodName: "SendMarketingEmail",
			Handler:    _NotificationService_SendMarketingEmail_Handler,
		},
		{
			MethodName: "SendMarketingPush",
			Handler:    _NotificationService_SendMarketingPush_Handler,
		},
		{
			MethodName: "GetMarketingCampaigns",
			Handler:    _NotificationService_GetMarketingCampaigns_Handler,
		},
		{
			MethodName: "TrackMarketingEvent",
			Handler:    _NotificationService_TrackMarketingEvent_Handler,
		},
		{
			MethodName: "GetNotificationPreferences",
			Handler:    _NotificationService_GetNotificationPreferences_Handler,
		},
		{
			MethodName: "UpdateNotificationPreferences",
			Handler:    _NotificationService_UpdateNotificationPreferences_Handler,
		},
		{
			MethodName: "SubscribeToNotifications",
			Handler:    _NotificationService_SubscribeToNotifications_Handler,
		},
		{
			MethodName: "UnsubscribeFromNotifications",
			Handler:    _NotificationService_UnsubscribeFromNotifications_Handler,
		},
		{
			MethodName: "GetNotificationTemplates",
			Handler:    _NotificationService_GetNotificationTemplates_Handler,
		},
		{
			MethodName: "CreateNotificationTemplate",
			Handler:    _NotificationService_CreateNotificationTemplate_Handler,
		},
		{
			MethodName: "UpdateNotificationTemplate",
			Handler:    _NotificationService_UpdateNotificationTemplate_Handler,
		},
		{
			MethodName: "DeleteNotificationTemplate",
			Handler:    _NotificationService_DeleteNotificationTemplate_Handler,
		},
		{
			MethodName: "GetNotificationAnalytics",
			Handler:    _NotificationService_GetNotificationAnalytics_Handler,
		},
		{
			MethodName: "GetDeliveryReports",
			Handler:    _NotificationService_GetDeliveryReports_Handler,
		},
		{
			MethodName: "GetEngagementMetrics",
			Handler:    _NotificationService_GetEngagementMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notification/notification_service.proto",
}
