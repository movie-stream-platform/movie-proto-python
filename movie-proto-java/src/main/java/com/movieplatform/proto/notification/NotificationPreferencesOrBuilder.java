// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notification/notification_req_res.proto

package com.movieplatform.proto.notification;

public interface NotificationPreferencesOrBuilder extends
    // @@protoc_insertion_point(interface_extends:proto.notification.NotificationPreferences)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * User ID
   * </pre>
   *
   * <code>string user_id = 1;</code>
   * @return The userId.
   */
  java.lang.String getUserId();
  /**
   * <pre>
   * User ID
   * </pre>
   *
   * <code>string user_id = 1;</code>
   * @return The bytes for userId.
   */
  com.google.protobuf.ByteString
      getUserIdBytes();

  /**
   * <pre>
   * Channel preferences
   * </pre>
   *
   * <code>map&lt;string, bool&gt; channel_preferences = 2;</code>
   */
  int getChannelPreferencesCount();
  /**
   * <pre>
   * Channel preferences
   * </pre>
   *
   * <code>map&lt;string, bool&gt; channel_preferences = 2;</code>
   */
  boolean containsChannelPreferences(
      java.lang.String key);
  /**
   * Use {@link #getChannelPreferencesMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.Boolean>
  getChannelPreferences();
  /**
   * <pre>
   * Channel preferences
   * </pre>
   *
   * <code>map&lt;string, bool&gt; channel_preferences = 2;</code>
   */
  java.util.Map<java.lang.String, java.lang.Boolean>
  getChannelPreferencesMap();
  /**
   * <pre>
   * Channel preferences
   * </pre>
   *
   * <code>map&lt;string, bool&gt; channel_preferences = 2;</code>
   */
  boolean getChannelPreferencesOrDefault(
      java.lang.String key,
      boolean defaultValue);
  /**
   * <pre>
   * Channel preferences
   * </pre>
   *
   * <code>map&lt;string, bool&gt; channel_preferences = 2;</code>
   */
  boolean getChannelPreferencesOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * Type preferences
   * </pre>
   *
   * <code>map&lt;string, bool&gt; type_preferences = 3;</code>
   */
  int getTypePreferencesCount();
  /**
   * <pre>
   * Type preferences
   * </pre>
   *
   * <code>map&lt;string, bool&gt; type_preferences = 3;</code>
   */
  boolean containsTypePreferences(
      java.lang.String key);
  /**
   * Use {@link #getTypePreferencesMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.Boolean>
  getTypePreferences();
  /**
   * <pre>
   * Type preferences
   * </pre>
   *
   * <code>map&lt;string, bool&gt; type_preferences = 3;</code>
   */
  java.util.Map<java.lang.String, java.lang.Boolean>
  getTypePreferencesMap();
  /**
   * <pre>
   * Type preferences
   * </pre>
   *
   * <code>map&lt;string, bool&gt; type_preferences = 3;</code>
   */
  boolean getTypePreferencesOrDefault(
      java.lang.String key,
      boolean defaultValue);
  /**
   * <pre>
   * Type preferences
   * </pre>
   *
   * <code>map&lt;string, bool&gt; type_preferences = 3;</code>
   */
  boolean getTypePreferencesOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * Custom preferences
   * </pre>
   *
   * <code>map&lt;string, string&gt; custom_preferences = 4;</code>
   */
  int getCustomPreferencesCount();
  /**
   * <pre>
   * Custom preferences
   * </pre>
   *
   * <code>map&lt;string, string&gt; custom_preferences = 4;</code>
   */
  boolean containsCustomPreferences(
      java.lang.String key);
  /**
   * Use {@link #getCustomPreferencesMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getCustomPreferences();
  /**
   * <pre>
   * Custom preferences
   * </pre>
   *
   * <code>map&lt;string, string&gt; custom_preferences = 4;</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getCustomPreferencesMap();
  /**
   * <pre>
   * Custom preferences
   * </pre>
   *
   * <code>map&lt;string, string&gt; custom_preferences = 4;</code>
   */
  /* nullable */
java.lang.String getCustomPreferencesOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue);
  /**
   * <pre>
   * Custom preferences
   * </pre>
   *
   * <code>map&lt;string, string&gt; custom_preferences = 4;</code>
   */
  java.lang.String getCustomPreferencesOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * When preferences were created
   * </pre>
   *
   * <code>.proto.common.DateTime created_at = 5;</code>
   * @return Whether the createdAt field is set.
   */
  boolean hasCreatedAt();
  /**
   * <pre>
   * When preferences were created
   * </pre>
   *
   * <code>.proto.common.DateTime created_at = 5;</code>
   * @return The createdAt.
   */
  com.movieplatform.proto.common.DateTime getCreatedAt();
  /**
   * <pre>
   * When preferences were created
   * </pre>
   *
   * <code>.proto.common.DateTime created_at = 5;</code>
   */
  com.movieplatform.proto.common.DateTimeOrBuilder getCreatedAtOrBuilder();

  /**
   * <pre>
   * When preferences were last updated
   * </pre>
   *
   * <code>.proto.common.DateTime last_updated = 6;</code>
   * @return Whether the lastUpdated field is set.
   */
  boolean hasLastUpdated();
  /**
   * <pre>
   * When preferences were last updated
   * </pre>
   *
   * <code>.proto.common.DateTime last_updated = 6;</code>
   * @return The lastUpdated.
   */
  com.movieplatform.proto.common.DateTime getLastUpdated();
  /**
   * <pre>
   * When preferences were last updated
   * </pre>
   *
   * <code>.proto.common.DateTime last_updated = 6;</code>
   */
  com.movieplatform.proto.common.DateTimeOrBuilder getLastUpdatedOrBuilder();
}
