// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/error_handling.proto

package com.movieplatform.proto.common;

/**
 * <pre>
 * HTTP-compatible status codes for gRPC responses
 * </pre>
 *
 * Protobuf enum {@code proto.common.HttpStatusCode}
 */
public enum HttpStatusCode
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>HTTP_STATUS_CODE_UNSPECIFIED = 0;</code>
   */
  HTTP_STATUS_CODE_UNSPECIFIED(0),
  /**
   * <pre>
   * 2xx Success
   * </pre>
   *
   * <code>HTTP_STATUS_CODE_OK = 200;</code>
   */
  HTTP_STATUS_CODE_OK(200),
  /**
   * <code>HTTP_STATUS_CODE_CREATED = 201;</code>
   */
  HTTP_STATUS_CODE_CREATED(201),
  /**
   * <code>HTTP_STATUS_CODE_ACCEPTED = 202;</code>
   */
  HTTP_STATUS_CODE_ACCEPTED(202),
  /**
   * <code>HTTP_STATUS_CODE_NO_CONTENT = 204;</code>
   */
  HTTP_STATUS_CODE_NO_CONTENT(204),
  /**
   * <pre>
   * 4xx Client Errors
   * </pre>
   *
   * <code>HTTP_STATUS_CODE_BAD_REQUEST = 400;</code>
   */
  HTTP_STATUS_CODE_BAD_REQUEST(400),
  /**
   * <code>HTTP_STATUS_CODE_UNAUTHORIZED = 401;</code>
   */
  HTTP_STATUS_CODE_UNAUTHORIZED(401),
  /**
   * <code>HTTP_STATUS_CODE_FORBIDDEN = 403;</code>
   */
  HTTP_STATUS_CODE_FORBIDDEN(403),
  /**
   * <code>HTTP_STATUS_CODE_NOT_FOUND = 404;</code>
   */
  HTTP_STATUS_CODE_NOT_FOUND(404),
  /**
   * <code>HTTP_STATUS_CODE_METHOD_NOT_ALLOWED = 405;</code>
   */
  HTTP_STATUS_CODE_METHOD_NOT_ALLOWED(405),
  /**
   * <code>HTTP_STATUS_CODE_CONFLICT = 409;</code>
   */
  HTTP_STATUS_CODE_CONFLICT(409),
  /**
   * <code>HTTP_STATUS_CODE_UNPROCESSABLE_ENTITY = 422;</code>
   */
  HTTP_STATUS_CODE_UNPROCESSABLE_ENTITY(422),
  /**
   * <code>HTTP_STATUS_CODE_TOO_MANY_REQUESTS = 429;</code>
   */
  HTTP_STATUS_CODE_TOO_MANY_REQUESTS(429),
  /**
   * <pre>
   * 5xx Server Errors
   * </pre>
   *
   * <code>HTTP_STATUS_CODE_INTERNAL_SERVER_ERROR = 500;</code>
   */
  HTTP_STATUS_CODE_INTERNAL_SERVER_ERROR(500),
  /**
   * <code>HTTP_STATUS_CODE_NOT_IMPLEMENTED = 501;</code>
   */
  HTTP_STATUS_CODE_NOT_IMPLEMENTED(501),
  /**
   * <code>HTTP_STATUS_CODE_BAD_GATEWAY = 502;</code>
   */
  HTTP_STATUS_CODE_BAD_GATEWAY(502),
  /**
   * <code>HTTP_STATUS_CODE_SERVICE_UNAVAILABLE = 503;</code>
   */
  HTTP_STATUS_CODE_SERVICE_UNAVAILABLE(503),
  /**
   * <code>HTTP_STATUS_CODE_GATEWAY_TIMEOUT = 504;</code>
   */
  HTTP_STATUS_CODE_GATEWAY_TIMEOUT(504),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>HTTP_STATUS_CODE_UNSPECIFIED = 0;</code>
   */
  public static final int HTTP_STATUS_CODE_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * 2xx Success
   * </pre>
   *
   * <code>HTTP_STATUS_CODE_OK = 200;</code>
   */
  public static final int HTTP_STATUS_CODE_OK_VALUE = 200;
  /**
   * <code>HTTP_STATUS_CODE_CREATED = 201;</code>
   */
  public static final int HTTP_STATUS_CODE_CREATED_VALUE = 201;
  /**
   * <code>HTTP_STATUS_CODE_ACCEPTED = 202;</code>
   */
  public static final int HTTP_STATUS_CODE_ACCEPTED_VALUE = 202;
  /**
   * <code>HTTP_STATUS_CODE_NO_CONTENT = 204;</code>
   */
  public static final int HTTP_STATUS_CODE_NO_CONTENT_VALUE = 204;
  /**
   * <pre>
   * 4xx Client Errors
   * </pre>
   *
   * <code>HTTP_STATUS_CODE_BAD_REQUEST = 400;</code>
   */
  public static final int HTTP_STATUS_CODE_BAD_REQUEST_VALUE = 400;
  /**
   * <code>HTTP_STATUS_CODE_UNAUTHORIZED = 401;</code>
   */
  public static final int HTTP_STATUS_CODE_UNAUTHORIZED_VALUE = 401;
  /**
   * <code>HTTP_STATUS_CODE_FORBIDDEN = 403;</code>
   */
  public static final int HTTP_STATUS_CODE_FORBIDDEN_VALUE = 403;
  /**
   * <code>HTTP_STATUS_CODE_NOT_FOUND = 404;</code>
   */
  public static final int HTTP_STATUS_CODE_NOT_FOUND_VALUE = 404;
  /**
   * <code>HTTP_STATUS_CODE_METHOD_NOT_ALLOWED = 405;</code>
   */
  public static final int HTTP_STATUS_CODE_METHOD_NOT_ALLOWED_VALUE = 405;
  /**
   * <code>HTTP_STATUS_CODE_CONFLICT = 409;</code>
   */
  public static final int HTTP_STATUS_CODE_CONFLICT_VALUE = 409;
  /**
   * <code>HTTP_STATUS_CODE_UNPROCESSABLE_ENTITY = 422;</code>
   */
  public static final int HTTP_STATUS_CODE_UNPROCESSABLE_ENTITY_VALUE = 422;
  /**
   * <code>HTTP_STATUS_CODE_TOO_MANY_REQUESTS = 429;</code>
   */
  public static final int HTTP_STATUS_CODE_TOO_MANY_REQUESTS_VALUE = 429;
  /**
   * <pre>
   * 5xx Server Errors
   * </pre>
   *
   * <code>HTTP_STATUS_CODE_INTERNAL_SERVER_ERROR = 500;</code>
   */
  public static final int HTTP_STATUS_CODE_INTERNAL_SERVER_ERROR_VALUE = 500;
  /**
   * <code>HTTP_STATUS_CODE_NOT_IMPLEMENTED = 501;</code>
   */
  public static final int HTTP_STATUS_CODE_NOT_IMPLEMENTED_VALUE = 501;
  /**
   * <code>HTTP_STATUS_CODE_BAD_GATEWAY = 502;</code>
   */
  public static final int HTTP_STATUS_CODE_BAD_GATEWAY_VALUE = 502;
  /**
   * <code>HTTP_STATUS_CODE_SERVICE_UNAVAILABLE = 503;</code>
   */
  public static final int HTTP_STATUS_CODE_SERVICE_UNAVAILABLE_VALUE = 503;
  /**
   * <code>HTTP_STATUS_CODE_GATEWAY_TIMEOUT = 504;</code>
   */
  public static final int HTTP_STATUS_CODE_GATEWAY_TIMEOUT_VALUE = 504;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static HttpStatusCode valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static HttpStatusCode forNumber(int value) {
    switch (value) {
      case 0: return HTTP_STATUS_CODE_UNSPECIFIED;
      case 200: return HTTP_STATUS_CODE_OK;
      case 201: return HTTP_STATUS_CODE_CREATED;
      case 202: return HTTP_STATUS_CODE_ACCEPTED;
      case 204: return HTTP_STATUS_CODE_NO_CONTENT;
      case 400: return HTTP_STATUS_CODE_BAD_REQUEST;
      case 401: return HTTP_STATUS_CODE_UNAUTHORIZED;
      case 403: return HTTP_STATUS_CODE_FORBIDDEN;
      case 404: return HTTP_STATUS_CODE_NOT_FOUND;
      case 405: return HTTP_STATUS_CODE_METHOD_NOT_ALLOWED;
      case 409: return HTTP_STATUS_CODE_CONFLICT;
      case 422: return HTTP_STATUS_CODE_UNPROCESSABLE_ENTITY;
      case 429: return HTTP_STATUS_CODE_TOO_MANY_REQUESTS;
      case 500: return HTTP_STATUS_CODE_INTERNAL_SERVER_ERROR;
      case 501: return HTTP_STATUS_CODE_NOT_IMPLEMENTED;
      case 502: return HTTP_STATUS_CODE_BAD_GATEWAY;
      case 503: return HTTP_STATUS_CODE_SERVICE_UNAVAILABLE;
      case 504: return HTTP_STATUS_CODE_GATEWAY_TIMEOUT;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<HttpStatusCode>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      HttpStatusCode> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<HttpStatusCode>() {
          public HttpStatusCode findValueByNumber(int number) {
            return HttpStatusCode.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.movieplatform.proto.common.ErrorHandlingProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final HttpStatusCode[] VALUES = values();

  public static HttpStatusCode valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private HttpStatusCode(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:proto.common.HttpStatusCode)
}

