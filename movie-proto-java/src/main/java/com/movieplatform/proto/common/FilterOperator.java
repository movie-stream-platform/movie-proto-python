// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/pagination.proto

package com.movieplatform.proto.common;

/**
 * <pre>
 * Filter operator enumeration
 * </pre>
 *
 * Protobuf enum {@code proto.common.FilterOperator}
 */
public enum FilterOperator
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>FILTER_OPERATOR_UNSPECIFIED = 0;</code>
   */
  FILTER_OPERATOR_UNSPECIFIED(0),
  /**
   * <pre>
   * Equal to
   * </pre>
   *
   * <code>FILTER_OPERATOR_EQUALS = 1;</code>
   */
  FILTER_OPERATOR_EQUALS(1),
  /**
   * <pre>
   * Not equal to
   * </pre>
   *
   * <code>FILTER_OPERATOR_NOT_EQUALS = 2;</code>
   */
  FILTER_OPERATOR_NOT_EQUALS(2),
  /**
   * <pre>
   * Greater than
   * </pre>
   *
   * <code>FILTER_OPERATOR_GREATER_THAN = 3;</code>
   */
  FILTER_OPERATOR_GREATER_THAN(3),
  /**
   * <pre>
   * Less than
   * </pre>
   *
   * <code>FILTER_OPERATOR_LESS_THAN = 4;</code>
   */
  FILTER_OPERATOR_LESS_THAN(4),
  /**
   * <pre>
   * Greater than or equal to
   * </pre>
   *
   * <code>FILTER_OPERATOR_GREATER_EQUAL = 5;</code>
   */
  FILTER_OPERATOR_GREATER_EQUAL(5),
  /**
   * <pre>
   * Less than or equal to
   * </pre>
   *
   * <code>FILTER_OPERATOR_LESS_EQUAL = 6;</code>
   */
  FILTER_OPERATOR_LESS_EQUAL(6),
  /**
   * <pre>
   * Contains
   * </pre>
   *
   * <code>FILTER_OPERATOR_CONTAINS = 7;</code>
   */
  FILTER_OPERATOR_CONTAINS(7),
  /**
   * <pre>
   * Starts with
   * </pre>
   *
   * <code>FILTER_OPERATOR_STARTS_WITH = 8;</code>
   */
  FILTER_OPERATOR_STARTS_WITH(8),
  /**
   * <pre>
   * Ends with
   * </pre>
   *
   * <code>FILTER_OPERATOR_ENDS_WITH = 9;</code>
   */
  FILTER_OPERATOR_ENDS_WITH(9),
  /**
   * <pre>
   * In list of values
   * </pre>
   *
   * <code>FILTER_OPERATOR_IN = 10;</code>
   */
  FILTER_OPERATOR_IN(10),
  /**
   * <pre>
   * Not in list of values
   * </pre>
   *
   * <code>FILTER_OPERATOR_NOT_IN = 11;</code>
   */
  FILTER_OPERATOR_NOT_IN(11),
  /**
   * <pre>
   * Between two values
   * </pre>
   *
   * <code>FILTER_OPERATOR_BETWEEN = 12;</code>
   */
  FILTER_OPERATOR_BETWEEN(12),
  /**
   * <pre>
   * Is null
   * </pre>
   *
   * <code>FILTER_OPERATOR_IS_NULL = 13;</code>
   */
  FILTER_OPERATOR_IS_NULL(13),
  /**
   * <pre>
   * Is not null
   * </pre>
   *
   * <code>FILTER_OPERATOR_IS_NOT_NULL = 14;</code>
   */
  FILTER_OPERATOR_IS_NOT_NULL(14),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>FILTER_OPERATOR_UNSPECIFIED = 0;</code>
   */
  public static final int FILTER_OPERATOR_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * Equal to
   * </pre>
   *
   * <code>FILTER_OPERATOR_EQUALS = 1;</code>
   */
  public static final int FILTER_OPERATOR_EQUALS_VALUE = 1;
  /**
   * <pre>
   * Not equal to
   * </pre>
   *
   * <code>FILTER_OPERATOR_NOT_EQUALS = 2;</code>
   */
  public static final int FILTER_OPERATOR_NOT_EQUALS_VALUE = 2;
  /**
   * <pre>
   * Greater than
   * </pre>
   *
   * <code>FILTER_OPERATOR_GREATER_THAN = 3;</code>
   */
  public static final int FILTER_OPERATOR_GREATER_THAN_VALUE = 3;
  /**
   * <pre>
   * Less than
   * </pre>
   *
   * <code>FILTER_OPERATOR_LESS_THAN = 4;</code>
   */
  public static final int FILTER_OPERATOR_LESS_THAN_VALUE = 4;
  /**
   * <pre>
   * Greater than or equal to
   * </pre>
   *
   * <code>FILTER_OPERATOR_GREATER_EQUAL = 5;</code>
   */
  public static final int FILTER_OPERATOR_GREATER_EQUAL_VALUE = 5;
  /**
   * <pre>
   * Less than or equal to
   * </pre>
   *
   * <code>FILTER_OPERATOR_LESS_EQUAL = 6;</code>
   */
  public static final int FILTER_OPERATOR_LESS_EQUAL_VALUE = 6;
  /**
   * <pre>
   * Contains
   * </pre>
   *
   * <code>FILTER_OPERATOR_CONTAINS = 7;</code>
   */
  public static final int FILTER_OPERATOR_CONTAINS_VALUE = 7;
  /**
   * <pre>
   * Starts with
   * </pre>
   *
   * <code>FILTER_OPERATOR_STARTS_WITH = 8;</code>
   */
  public static final int FILTER_OPERATOR_STARTS_WITH_VALUE = 8;
  /**
   * <pre>
   * Ends with
   * </pre>
   *
   * <code>FILTER_OPERATOR_ENDS_WITH = 9;</code>
   */
  public static final int FILTER_OPERATOR_ENDS_WITH_VALUE = 9;
  /**
   * <pre>
   * In list of values
   * </pre>
   *
   * <code>FILTER_OPERATOR_IN = 10;</code>
   */
  public static final int FILTER_OPERATOR_IN_VALUE = 10;
  /**
   * <pre>
   * Not in list of values
   * </pre>
   *
   * <code>FILTER_OPERATOR_NOT_IN = 11;</code>
   */
  public static final int FILTER_OPERATOR_NOT_IN_VALUE = 11;
  /**
   * <pre>
   * Between two values
   * </pre>
   *
   * <code>FILTER_OPERATOR_BETWEEN = 12;</code>
   */
  public static final int FILTER_OPERATOR_BETWEEN_VALUE = 12;
  /**
   * <pre>
   * Is null
   * </pre>
   *
   * <code>FILTER_OPERATOR_IS_NULL = 13;</code>
   */
  public static final int FILTER_OPERATOR_IS_NULL_VALUE = 13;
  /**
   * <pre>
   * Is not null
   * </pre>
   *
   * <code>FILTER_OPERATOR_IS_NOT_NULL = 14;</code>
   */
  public static final int FILTER_OPERATOR_IS_NOT_NULL_VALUE = 14;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static FilterOperator valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static FilterOperator forNumber(int value) {
    switch (value) {
      case 0: return FILTER_OPERATOR_UNSPECIFIED;
      case 1: return FILTER_OPERATOR_EQUALS;
      case 2: return FILTER_OPERATOR_NOT_EQUALS;
      case 3: return FILTER_OPERATOR_GREATER_THAN;
      case 4: return FILTER_OPERATOR_LESS_THAN;
      case 5: return FILTER_OPERATOR_GREATER_EQUAL;
      case 6: return FILTER_OPERATOR_LESS_EQUAL;
      case 7: return FILTER_OPERATOR_CONTAINS;
      case 8: return FILTER_OPERATOR_STARTS_WITH;
      case 9: return FILTER_OPERATOR_ENDS_WITH;
      case 10: return FILTER_OPERATOR_IN;
      case 11: return FILTER_OPERATOR_NOT_IN;
      case 12: return FILTER_OPERATOR_BETWEEN;
      case 13: return FILTER_OPERATOR_IS_NULL;
      case 14: return FILTER_OPERATOR_IS_NOT_NULL;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<FilterOperator>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      FilterOperator> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<FilterOperator>() {
          public FilterOperator findValueByNumber(int number) {
            return FilterOperator.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.movieplatform.proto.common.PaginationProto.getDescriptor().getEnumTypes().get(1);
  }

  private static final FilterOperator[] VALUES = values();

  public static FilterOperator valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private FilterOperator(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:proto.common.FilterOperator)
}

