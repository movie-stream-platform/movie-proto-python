// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/error_handling.proto

package com.movieplatform.proto.common;

/**
 * <pre>
 * Common error codes used across services
 * </pre>
 *
 * Protobuf enum {@code proto.common.ErrorCode}
 */
public enum ErrorCode
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>ERROR_CODE_UNSPECIFIED = 0;</code>
   */
  ERROR_CODE_UNSPECIFIED(0),
  /**
   * <pre>
   * Authentication &amp; Authorization
   * </pre>
   *
   * <code>ERROR_CODE_UNAUTHORIZED = 1001;</code>
   */
  ERROR_CODE_UNAUTHORIZED(1001),
  /**
   * <code>ERROR_CODE_FORBIDDEN = 1002;</code>
   */
  ERROR_CODE_FORBIDDEN(1002),
  /**
   * <code>ERROR_CODE_TOKEN_EXPIRED = 1003;</code>
   */
  ERROR_CODE_TOKEN_EXPIRED(1003),
  /**
   * <code>ERROR_CODE_INVALID_TOKEN = 1004;</code>
   */
  ERROR_CODE_INVALID_TOKEN(1004),
  /**
   * <code>ERROR_CODE_INSUFFICIENT_PERMISSIONS = 1005;</code>
   */
  ERROR_CODE_INSUFFICIENT_PERMISSIONS(1005),
  /**
   * <pre>
   * Validation Errors
   * </pre>
   *
   * <code>ERROR_CODE_VALIDATION_FAILED = 2001;</code>
   */
  ERROR_CODE_VALIDATION_FAILED(2001),
  /**
   * <code>ERROR_CODE_REQUIRED_FIELD_MISSING = 2002;</code>
   */
  ERROR_CODE_REQUIRED_FIELD_MISSING(2002),
  /**
   * <code>ERROR_CODE_INVALID_FORMAT = 2003;</code>
   */
  ERROR_CODE_INVALID_FORMAT(2003),
  /**
   * <code>ERROR_CODE_VALUE_TOO_LONG = 2004;</code>
   */
  ERROR_CODE_VALUE_TOO_LONG(2004),
  /**
   * <code>ERROR_CODE_VALUE_TOO_SHORT = 2005;</code>
   */
  ERROR_CODE_VALUE_TOO_SHORT(2005),
  /**
   * <code>ERROR_CODE_INVALID_RANGE = 2006;</code>
   */
  ERROR_CODE_INVALID_RANGE(2006),
  /**
   * <pre>
   * Resource Errors
   * </pre>
   *
   * <code>ERROR_CODE_RESOURCE_NOT_FOUND = 3001;</code>
   */
  ERROR_CODE_RESOURCE_NOT_FOUND(3001),
  /**
   * <code>ERROR_CODE_RESOURCE_ALREADY_EXISTS = 3002;</code>
   */
  ERROR_CODE_RESOURCE_ALREADY_EXISTS(3002),
  /**
   * <code>ERROR_CODE_RESOURCE_CONFLICT = 3003;</code>
   */
  ERROR_CODE_RESOURCE_CONFLICT(3003),
  /**
   * <code>ERROR_CODE_RESOURCE_DELETED = 3004;</code>
   */
  ERROR_CODE_RESOURCE_DELETED(3004),
  /**
   * <pre>
   * Business Logic Errors
   * </pre>
   *
   * <code>ERROR_CODE_INVALID_OPERATION = 4001;</code>
   */
  ERROR_CODE_INVALID_OPERATION(4001),
  /**
   * <code>ERROR_CODE_OPERATION_NOT_ALLOWED = 4002;</code>
   */
  ERROR_CODE_OPERATION_NOT_ALLOWED(4002),
  /**
   * <code>ERROR_CODE_QUOTA_EXCEEDED = 4003;</code>
   */
  ERROR_CODE_QUOTA_EXCEEDED(4003),
  /**
   * <code>ERROR_CODE_RATE_LIMIT_EXCEEDED = 4004;</code>
   */
  ERROR_CODE_RATE_LIMIT_EXCEEDED(4004),
  /**
   * <pre>
   * System Errors
   * </pre>
   *
   * <code>ERROR_CODE_INTERNAL_ERROR = 5001;</code>
   */
  ERROR_CODE_INTERNAL_ERROR(5001),
  /**
   * <code>ERROR_CODE_SERVICE_UNAVAILABLE = 5002;</code>
   */
  ERROR_CODE_SERVICE_UNAVAILABLE(5002),
  /**
   * <code>ERROR_CODE_DATABASE_ERROR = 5003;</code>
   */
  ERROR_CODE_DATABASE_ERROR(5003),
  /**
   * <code>ERROR_CODE_EXTERNAL_SERVICE_ERROR = 5004;</code>
   */
  ERROR_CODE_EXTERNAL_SERVICE_ERROR(5004),
  /**
   * <code>ERROR_CODE_TIMEOUT = 5005;</code>
   */
  ERROR_CODE_TIMEOUT(5005),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>ERROR_CODE_UNSPECIFIED = 0;</code>
   */
  public static final int ERROR_CODE_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * Authentication &amp; Authorization
   * </pre>
   *
   * <code>ERROR_CODE_UNAUTHORIZED = 1001;</code>
   */
  public static final int ERROR_CODE_UNAUTHORIZED_VALUE = 1001;
  /**
   * <code>ERROR_CODE_FORBIDDEN = 1002;</code>
   */
  public static final int ERROR_CODE_FORBIDDEN_VALUE = 1002;
  /**
   * <code>ERROR_CODE_TOKEN_EXPIRED = 1003;</code>
   */
  public static final int ERROR_CODE_TOKEN_EXPIRED_VALUE = 1003;
  /**
   * <code>ERROR_CODE_INVALID_TOKEN = 1004;</code>
   */
  public static final int ERROR_CODE_INVALID_TOKEN_VALUE = 1004;
  /**
   * <code>ERROR_CODE_INSUFFICIENT_PERMISSIONS = 1005;</code>
   */
  public static final int ERROR_CODE_INSUFFICIENT_PERMISSIONS_VALUE = 1005;
  /**
   * <pre>
   * Validation Errors
   * </pre>
   *
   * <code>ERROR_CODE_VALIDATION_FAILED = 2001;</code>
   */
  public static final int ERROR_CODE_VALIDATION_FAILED_VALUE = 2001;
  /**
   * <code>ERROR_CODE_REQUIRED_FIELD_MISSING = 2002;</code>
   */
  public static final int ERROR_CODE_REQUIRED_FIELD_MISSING_VALUE = 2002;
  /**
   * <code>ERROR_CODE_INVALID_FORMAT = 2003;</code>
   */
  public static final int ERROR_CODE_INVALID_FORMAT_VALUE = 2003;
  /**
   * <code>ERROR_CODE_VALUE_TOO_LONG = 2004;</code>
   */
  public static final int ERROR_CODE_VALUE_TOO_LONG_VALUE = 2004;
  /**
   * <code>ERROR_CODE_VALUE_TOO_SHORT = 2005;</code>
   */
  public static final int ERROR_CODE_VALUE_TOO_SHORT_VALUE = 2005;
  /**
   * <code>ERROR_CODE_INVALID_RANGE = 2006;</code>
   */
  public static final int ERROR_CODE_INVALID_RANGE_VALUE = 2006;
  /**
   * <pre>
   * Resource Errors
   * </pre>
   *
   * <code>ERROR_CODE_RESOURCE_NOT_FOUND = 3001;</code>
   */
  public static final int ERROR_CODE_RESOURCE_NOT_FOUND_VALUE = 3001;
  /**
   * <code>ERROR_CODE_RESOURCE_ALREADY_EXISTS = 3002;</code>
   */
  public static final int ERROR_CODE_RESOURCE_ALREADY_EXISTS_VALUE = 3002;
  /**
   * <code>ERROR_CODE_RESOURCE_CONFLICT = 3003;</code>
   */
  public static final int ERROR_CODE_RESOURCE_CONFLICT_VALUE = 3003;
  /**
   * <code>ERROR_CODE_RESOURCE_DELETED = 3004;</code>
   */
  public static final int ERROR_CODE_RESOURCE_DELETED_VALUE = 3004;
  /**
   * <pre>
   * Business Logic Errors
   * </pre>
   *
   * <code>ERROR_CODE_INVALID_OPERATION = 4001;</code>
   */
  public static final int ERROR_CODE_INVALID_OPERATION_VALUE = 4001;
  /**
   * <code>ERROR_CODE_OPERATION_NOT_ALLOWED = 4002;</code>
   */
  public static final int ERROR_CODE_OPERATION_NOT_ALLOWED_VALUE = 4002;
  /**
   * <code>ERROR_CODE_QUOTA_EXCEEDED = 4003;</code>
   */
  public static final int ERROR_CODE_QUOTA_EXCEEDED_VALUE = 4003;
  /**
   * <code>ERROR_CODE_RATE_LIMIT_EXCEEDED = 4004;</code>
   */
  public static final int ERROR_CODE_RATE_LIMIT_EXCEEDED_VALUE = 4004;
  /**
   * <pre>
   * System Errors
   * </pre>
   *
   * <code>ERROR_CODE_INTERNAL_ERROR = 5001;</code>
   */
  public static final int ERROR_CODE_INTERNAL_ERROR_VALUE = 5001;
  /**
   * <code>ERROR_CODE_SERVICE_UNAVAILABLE = 5002;</code>
   */
  public static final int ERROR_CODE_SERVICE_UNAVAILABLE_VALUE = 5002;
  /**
   * <code>ERROR_CODE_DATABASE_ERROR = 5003;</code>
   */
  public static final int ERROR_CODE_DATABASE_ERROR_VALUE = 5003;
  /**
   * <code>ERROR_CODE_EXTERNAL_SERVICE_ERROR = 5004;</code>
   */
  public static final int ERROR_CODE_EXTERNAL_SERVICE_ERROR_VALUE = 5004;
  /**
   * <code>ERROR_CODE_TIMEOUT = 5005;</code>
   */
  public static final int ERROR_CODE_TIMEOUT_VALUE = 5005;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static ErrorCode valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static ErrorCode forNumber(int value) {
    switch (value) {
      case 0: return ERROR_CODE_UNSPECIFIED;
      case 1001: return ERROR_CODE_UNAUTHORIZED;
      case 1002: return ERROR_CODE_FORBIDDEN;
      case 1003: return ERROR_CODE_TOKEN_EXPIRED;
      case 1004: return ERROR_CODE_INVALID_TOKEN;
      case 1005: return ERROR_CODE_INSUFFICIENT_PERMISSIONS;
      case 2001: return ERROR_CODE_VALIDATION_FAILED;
      case 2002: return ERROR_CODE_REQUIRED_FIELD_MISSING;
      case 2003: return ERROR_CODE_INVALID_FORMAT;
      case 2004: return ERROR_CODE_VALUE_TOO_LONG;
      case 2005: return ERROR_CODE_VALUE_TOO_SHORT;
      case 2006: return ERROR_CODE_INVALID_RANGE;
      case 3001: return ERROR_CODE_RESOURCE_NOT_FOUND;
      case 3002: return ERROR_CODE_RESOURCE_ALREADY_EXISTS;
      case 3003: return ERROR_CODE_RESOURCE_CONFLICT;
      case 3004: return ERROR_CODE_RESOURCE_DELETED;
      case 4001: return ERROR_CODE_INVALID_OPERATION;
      case 4002: return ERROR_CODE_OPERATION_NOT_ALLOWED;
      case 4003: return ERROR_CODE_QUOTA_EXCEEDED;
      case 4004: return ERROR_CODE_RATE_LIMIT_EXCEEDED;
      case 5001: return ERROR_CODE_INTERNAL_ERROR;
      case 5002: return ERROR_CODE_SERVICE_UNAVAILABLE;
      case 5003: return ERROR_CODE_DATABASE_ERROR;
      case 5004: return ERROR_CODE_EXTERNAL_SERVICE_ERROR;
      case 5005: return ERROR_CODE_TIMEOUT;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ErrorCode>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ErrorCode> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ErrorCode>() {
          public ErrorCode findValueByNumber(int number) {
            return ErrorCode.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.movieplatform.proto.common.ErrorHandlingProto.getDescriptor().getEnumTypes().get(1);
  }

  private static final ErrorCode[] VALUES = values();

  public static ErrorCode valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private ErrorCode(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:proto.common.ErrorCode)
}

