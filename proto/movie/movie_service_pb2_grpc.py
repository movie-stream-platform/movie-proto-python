# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from movie import movie_req_res_pb2 as movie_dot_movie__req__res__pb2

GRPC_GENERATED_VERSION = '1.64.0'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in movie/movie_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class MovieServiceStub(object):
    """Movie content management service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateMovie = channel.unary_unary(
                '/proto.movie.MovieService/CreateMovie',
                request_serializer=movie_dot_movie__req__res__pb2.CreateMovieRequest.SerializeToString,
                response_deserializer=movie_dot_movie__req__res__pb2.CreateMovieResponse.FromString,
                _registered_method=True)
        self.GetMovie = channel.unary_unary(
                '/proto.movie.MovieService/GetMovie',
                request_serializer=movie_dot_movie__req__res__pb2.GetMovieRequest.SerializeToString,
                response_deserializer=movie_dot_movie__req__res__pb2.GetMovieResponse.FromString,
                _registered_method=True)
        self.UpdateMovie = channel.unary_unary(
                '/proto.movie.MovieService/UpdateMovie',
                request_serializer=movie_dot_movie__req__res__pb2.UpdateMovieRequest.SerializeToString,
                response_deserializer=movie_dot_movie__req__res__pb2.UpdateMovieResponse.FromString,
                _registered_method=True)
        self.DeleteMovie = channel.unary_unary(
                '/proto.movie.MovieService/DeleteMovie',
                request_serializer=movie_dot_movie__req__res__pb2.DeleteMovieRequest.SerializeToString,
                response_deserializer=movie_dot_movie__req__res__pb2.DeleteMovieResponse.FromString,
                _registered_method=True)
        self.GetMoviesByIDs = channel.unary_unary(
                '/proto.movie.MovieService/GetMoviesByIDs',
                request_serializer=movie_dot_movie__req__res__pb2.GetMoviesByIDsRequest.SerializeToString,
                response_deserializer=movie_dot_movie__req__res__pb2.GetMoviesByIDsResponse.FromString,
                _registered_method=True)
        self.BulkUpdateMovies = channel.unary_unary(
                '/proto.movie.MovieService/BulkUpdateMovies',
                request_serializer=movie_dot_movie__req__res__pb2.BulkUpdateMoviesRequest.SerializeToString,
                response_deserializer=movie_dot_movie__req__res__pb2.BulkUpdateMoviesResponse.FromString,
                _registered_method=True)
        self.BulkDeleteMovies = channel.unary_unary(
                '/proto.movie.MovieService/BulkDeleteMovies',
                request_serializer=movie_dot_movie__req__res__pb2.BulkDeleteMoviesRequest.SerializeToString,
                response_deserializer=movie_dot_movie__req__res__pb2.BulkDeleteMoviesResponse.FromString,
                _registered_method=True)
        self.ValidateMovie = channel.unary_unary(
                '/proto.movie.MovieService/ValidateMovie',
                request_serializer=movie_dot_movie__req__res__pb2.ValidateMovieRequest.SerializeToString,
                response_deserializer=movie_dot_movie__req__res__pb2.ValidateMovieResponse.FromString,
                _registered_method=True)
        self.PublishMovie = channel.unary_unary(
                '/proto.movie.MovieService/PublishMovie',
                request_serializer=movie_dot_movie__req__res__pb2.PublishMovieRequest.SerializeToString,
                response_deserializer=movie_dot_movie__req__res__pb2.PublishMovieResponse.FromString,
                _registered_method=True)
        self.UnpublishMovie = channel.unary_unary(
                '/proto.movie.MovieService/UnpublishMovie',
                request_serializer=movie_dot_movie__req__res__pb2.UnpublishMovieRequest.SerializeToString,
                response_deserializer=movie_dot_movie__req__res__pb2.UnpublishMovieResponse.FromString,
                _registered_method=True)
        self.SearchMovies = channel.unary_unary(
                '/proto.movie.MovieService/SearchMovies',
                request_serializer=movie_dot_movie__req__res__pb2.SearchMoviesRequest.SerializeToString,
                response_deserializer=movie_dot_movie__req__res__pb2.SearchMoviesResponse.FromString,
                _registered_method=True)
        self.GetPopularMovies = channel.unary_unary(
                '/proto.movie.MovieService/GetPopularMovies',
                request_serializer=movie_dot_movie__req__res__pb2.GetPopularMoviesRequest.SerializeToString,
                response_deserializer=movie_dot_movie__req__res__pb2.GetPopularMoviesResponse.FromString,
                _registered_method=True)
        self.GetTrendingMovies = channel.unary_unary(
                '/proto.movie.MovieService/GetTrendingMovies',
                request_serializer=movie_dot_movie__req__res__pb2.GetTrendingMoviesRequest.SerializeToString,
                response_deserializer=movie_dot_movie__req__res__pb2.GetTrendingMoviesResponse.FromString,
                _registered_method=True)
        self.GetSimilarMovies = channel.unary_unary(
                '/proto.movie.MovieService/GetSimilarMovies',
                request_serializer=movie_dot_movie__req__res__pb2.GetSimilarMoviesRequest.SerializeToString,
                response_deserializer=movie_dot_movie__req__res__pb2.GetSimilarMoviesResponse.FromString,
                _registered_method=True)


class MovieServiceServicer(object):
    """Movie content management service
    """

    def CreateMovie(self, request, context):
        """Movie CRUD operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMovie(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateMovie(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteMovie(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMoviesByIDs(self, request, context):
        """Bulk operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BulkUpdateMovies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BulkDeleteMovies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateMovie(self, request, context):
        """Content Management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishMovie(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnpublishMovie(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchMovies(self, request, context):
        """Search and Discovery
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPopularMovies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTrendingMovies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSimilarMovies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MovieServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateMovie': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateMovie,
                    request_deserializer=movie_dot_movie__req__res__pb2.CreateMovieRequest.FromString,
                    response_serializer=movie_dot_movie__req__res__pb2.CreateMovieResponse.SerializeToString,
            ),
            'GetMovie': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMovie,
                    request_deserializer=movie_dot_movie__req__res__pb2.GetMovieRequest.FromString,
                    response_serializer=movie_dot_movie__req__res__pb2.GetMovieResponse.SerializeToString,
            ),
            'UpdateMovie': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateMovie,
                    request_deserializer=movie_dot_movie__req__res__pb2.UpdateMovieRequest.FromString,
                    response_serializer=movie_dot_movie__req__res__pb2.UpdateMovieResponse.SerializeToString,
            ),
            'DeleteMovie': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteMovie,
                    request_deserializer=movie_dot_movie__req__res__pb2.DeleteMovieRequest.FromString,
                    response_serializer=movie_dot_movie__req__res__pb2.DeleteMovieResponse.SerializeToString,
            ),
            'GetMoviesByIDs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMoviesByIDs,
                    request_deserializer=movie_dot_movie__req__res__pb2.GetMoviesByIDsRequest.FromString,
                    response_serializer=movie_dot_movie__req__res__pb2.GetMoviesByIDsResponse.SerializeToString,
            ),
            'BulkUpdateMovies': grpc.unary_unary_rpc_method_handler(
                    servicer.BulkUpdateMovies,
                    request_deserializer=movie_dot_movie__req__res__pb2.BulkUpdateMoviesRequest.FromString,
                    response_serializer=movie_dot_movie__req__res__pb2.BulkUpdateMoviesResponse.SerializeToString,
            ),
            'BulkDeleteMovies': grpc.unary_unary_rpc_method_handler(
                    servicer.BulkDeleteMovies,
                    request_deserializer=movie_dot_movie__req__res__pb2.BulkDeleteMoviesRequest.FromString,
                    response_serializer=movie_dot_movie__req__res__pb2.BulkDeleteMoviesResponse.SerializeToString,
            ),
            'ValidateMovie': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateMovie,
                    request_deserializer=movie_dot_movie__req__res__pb2.ValidateMovieRequest.FromString,
                    response_serializer=movie_dot_movie__req__res__pb2.ValidateMovieResponse.SerializeToString,
            ),
            'PublishMovie': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishMovie,
                    request_deserializer=movie_dot_movie__req__res__pb2.PublishMovieRequest.FromString,
                    response_serializer=movie_dot_movie__req__res__pb2.PublishMovieResponse.SerializeToString,
            ),
            'UnpublishMovie': grpc.unary_unary_rpc_method_handler(
                    servicer.UnpublishMovie,
                    request_deserializer=movie_dot_movie__req__res__pb2.UnpublishMovieRequest.FromString,
                    response_serializer=movie_dot_movie__req__res__pb2.UnpublishMovieResponse.SerializeToString,
            ),
            'SearchMovies': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchMovies,
                    request_deserializer=movie_dot_movie__req__res__pb2.SearchMoviesRequest.FromString,
                    response_serializer=movie_dot_movie__req__res__pb2.SearchMoviesResponse.SerializeToString,
            ),
            'GetPopularMovies': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPopularMovies,
                    request_deserializer=movie_dot_movie__req__res__pb2.GetPopularMoviesRequest.FromString,
                    response_serializer=movie_dot_movie__req__res__pb2.GetPopularMoviesResponse.SerializeToString,
            ),
            'GetTrendingMovies': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTrendingMovies,
                    request_deserializer=movie_dot_movie__req__res__pb2.GetTrendingMoviesRequest.FromString,
                    response_serializer=movie_dot_movie__req__res__pb2.GetTrendingMoviesResponse.SerializeToString,
            ),
            'GetSimilarMovies': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSimilarMovies,
                    request_deserializer=movie_dot_movie__req__res__pb2.GetSimilarMoviesRequest.FromString,
                    response_serializer=movie_dot_movie__req__res__pb2.GetSimilarMoviesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.movie.MovieService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('proto.movie.MovieService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MovieService(object):
    """Movie content management service
    """

    @staticmethod
    def CreateMovie(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.movie.MovieService/CreateMovie',
            movie_dot_movie__req__res__pb2.CreateMovieRequest.SerializeToString,
            movie_dot_movie__req__res__pb2.CreateMovieResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMovie(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.movie.MovieService/GetMovie',
            movie_dot_movie__req__res__pb2.GetMovieRequest.SerializeToString,
            movie_dot_movie__req__res__pb2.GetMovieResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateMovie(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.movie.MovieService/UpdateMovie',
            movie_dot_movie__req__res__pb2.UpdateMovieRequest.SerializeToString,
            movie_dot_movie__req__res__pb2.UpdateMovieResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteMovie(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.movie.MovieService/DeleteMovie',
            movie_dot_movie__req__res__pb2.DeleteMovieRequest.SerializeToString,
            movie_dot_movie__req__res__pb2.DeleteMovieResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMoviesByIDs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.movie.MovieService/GetMoviesByIDs',
            movie_dot_movie__req__res__pb2.GetMoviesByIDsRequest.SerializeToString,
            movie_dot_movie__req__res__pb2.GetMoviesByIDsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BulkUpdateMovies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.movie.MovieService/BulkUpdateMovies',
            movie_dot_movie__req__res__pb2.BulkUpdateMoviesRequest.SerializeToString,
            movie_dot_movie__req__res__pb2.BulkUpdateMoviesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BulkDeleteMovies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.movie.MovieService/BulkDeleteMovies',
            movie_dot_movie__req__res__pb2.BulkDeleteMoviesRequest.SerializeToString,
            movie_dot_movie__req__res__pb2.BulkDeleteMoviesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ValidateMovie(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.movie.MovieService/ValidateMovie',
            movie_dot_movie__req__res__pb2.ValidateMovieRequest.SerializeToString,
            movie_dot_movie__req__res__pb2.ValidateMovieResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PublishMovie(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.movie.MovieService/PublishMovie',
            movie_dot_movie__req__res__pb2.PublishMovieRequest.SerializeToString,
            movie_dot_movie__req__res__pb2.PublishMovieResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnpublishMovie(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.movie.MovieService/UnpublishMovie',
            movie_dot_movie__req__res__pb2.UnpublishMovieRequest.SerializeToString,
            movie_dot_movie__req__res__pb2.UnpublishMovieResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SearchMovies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.movie.MovieService/SearchMovies',
            movie_dot_movie__req__res__pb2.SearchMoviesRequest.SerializeToString,
            movie_dot_movie__req__res__pb2.SearchMoviesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPopularMovies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.movie.MovieService/GetPopularMovies',
            movie_dot_movie__req__res__pb2.GetPopularMoviesRequest.SerializeToString,
            movie_dot_movie__req__res__pb2.GetPopularMoviesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTrendingMovies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.movie.MovieService/GetTrendingMovies',
            movie_dot_movie__req__res__pb2.GetTrendingMoviesRequest.SerializeToString,
            movie_dot_movie__req__res__pb2.GetTrendingMoviesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSimilarMovies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.movie.MovieService/GetSimilarMovies',
            movie_dot_movie__req__res__pb2.GetSimilarMoviesRequest.SerializeToString,
            movie_dot_movie__req__res__pb2.GetSimilarMoviesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
